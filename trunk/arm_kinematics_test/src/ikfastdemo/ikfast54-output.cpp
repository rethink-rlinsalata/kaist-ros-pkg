/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 54 generated on 2012-11-21 23:15:40.368647
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : fmul(0), foffset(0), freeind(-1), maxsolutions(1) {
            indices[0] = indices[1] = -1;
        }
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
        signed char freeind; ///< if >= 0, mimics another joint
        unsigned char maxsolutions; ///< max possible indices, 0 if controlled by free index or a free joint itself
        unsigned char indices[2]; ///< unique index of the solution used to keep track on what part it came from. sometimes a solution can be repeated for different indices. store at least another repeated root
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;

    bool Validate() const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].maxsolutions == (unsigned char)-1) {
                return false;
            }
            if( basesol[i].maxsolutions > 0 ) {
                if( basesol[i].indices[0] >= basesol[i].maxsolutions ) {
                    return false;
                }
                if( basesol[i].indices[1] != (unsigned char)-1 && basesol[i].indices[1] >= basesol[i].maxsolutions ) {
                    return false;
                }
            }
        }
        return true;
    }

    void GetSolutionIndices(std::vector<unsigned int>& v) const {
        v.resize(0);
        v.push_back(0);
        for(int i = (int)basesol.size()-1; i >= 0; --i) {
            if( basesol[i].maxsolutions != (unsigned char)-1 && basesol[i].maxsolutions > 1 ) {
                for(size_t j = 0; j < v.size(); ++j) {
                    v[j] *= basesol[i].maxsolutions;
                }
                size_t orgsize=v.size();
                if( basesol[i].indices[1] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v.push_back(v[j]+basesol[i].indices[1]);
                    }
                }
                if( basesol[i].indices[0] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v[j] += basesol[i].indices[0];
                    }
                }
            }
        }
    }
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IKReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IKReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return 1.0f;
    }
    else if( f < 0 ) {
        return -1.0f;
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[3]);
x3=IKcos(j[3]);
x4=IKcos(j[2]);
x5=IKsin(j[1]);
x6=((x0)*(x4)*(x5));
x7=IKsin(j[0]);
x8=IKsin(j[2]);
x9=((x7)*(x8));
x10=((x6)+(x9));
x11=((-1.00000000000000)*(x10));
x12=IKsin(j[5]);
x13=((x11)*(x2));
x14=IKcos(j[5]);
x15=IKcos(j[4]);
x16=((x0)*(x1)*(x2));
x17=((x11)*(x3));
x18=((x17)+(x16));
x19=((x15)*(x18));
x20=IKsin(j[4]);
x21=((x4)*(x7));
x22=((x0)*(x5)*(x8));
x23=((x21)+(((-1.00000000000000)*(x22))));
x24=((x20)*(x23));
x25=((x24)+(x19));
x26=((x0)*(x8));
x27=((x21)*(x5));
x28=((x26)+(((-1.00000000000000)*(x27))));
x29=((x0)*(x4));
x30=((x5)*(x9));
x31=((x29)+(x30));
x32=((-1.00000000000000)*(x31));
x33=((x20)*(x32));
x34=((x28)*(x3));
x35=((x1)*(x2)*(x7));
x36=((x35)+(x34));
x37=((x15)*(x36));
x38=((x33)+(x37));
x39=((x1)*(x20)*(x8));
x40=((x2)*(x5));
x41=((x1)*(x3)*(x4));
x42=((x40)+(x41));
x43=((x15)*(x42));
x44=((x43)+(x39));
x45=((x3)*(x5));
x46=((x1)*(x2)*(x4));
eerot[0]=((((x14)*(((x13)+(((-1.00000000000000)*(x0)*(x1)*(x3)))))))+(((x12)*(x25))));
eerot[1]=((((x12)*(((((-1.00000000000000)*(x13)))+(((x0)*(x1)*(x3)))))))+(((x14)*(x25))));
eerot[2]=((((x15)*(((x22)+(((-1.00000000000000)*(x21)))))))+(((x18)*(x20))));
eetrans[0]=((((x3)*(((((-0.0285000000000000)*(x9)))+(((-0.0285000000000000)*(x6)))))))+(((0.0285000000000000)*(x16)))+(((0.300000000000000)*(x0)*(x1)))+(((-0.265280000000000)*(x0)*(x1)*(x3)))+(((x12)*(((((0.0435000000000000)*(x19)))+(((0.0435000000000000)*(x24)))))))+(((-0.0286100000000000)*(x6)))+(((x14)*(((((-0.0435000000000000)*(x0)*(x1)*(x3)))+(((0.0435000000000000)*(x13)))))))+(((-0.0286100000000000)*(x9)))+(((x2)*(((((-0.265280000000000)*(x9)))+(((-0.265280000000000)*(x6))))))));
eerot[3]=((((x12)*(x38)))+(((x14)*(((((-1.00000000000000)*(x1)*(x3)*(x7)))+(((x2)*(x28))))))));
eerot[4]=((((x12)*(((((-1.00000000000000)*(x2)*(x28)))+(((x1)*(x3)*(x7)))))))+(((x14)*(x38))));
eerot[5]=((((x15)*(x31)))+(((x20)*(x36))));
eetrans[1]=((((0.0286100000000000)*(x26)))+(((0.300000000000000)*(x1)*(x7)))+(((x12)*(((((0.0435000000000000)*(x37)))+(((0.0435000000000000)*(x33)))))))+(((-0.265280000000000)*(x1)*(x3)*(x7)))+(((x3)*(((((-0.0285000000000000)*(x27)))+(((0.0285000000000000)*(x26)))))))+(((0.0285000000000000)*(x35)))+(((-0.0286100000000000)*(x27)))+(((x14)*(((((-0.0435000000000000)*(x1)*(x3)*(x7)))+(((0.0435000000000000)*(x2)*(x28)))))))+(((x2)*(((((-0.265280000000000)*(x27)))+(((0.265280000000000)*(x26))))))));
eerot[6]=((((x14)*(((x46)+(((-1.00000000000000)*(x45)))))))+(((x12)*(x44))));
eerot[7]=((((x14)*(x44)))+(((x12)*(((((-1.00000000000000)*(x46)))+(x45))))));
eerot[8]=((((-1.00000000000000)*(x1)*(x15)*(x8)))+(((x20)*(x42))));
eetrans[2]=((0.0836000000000000)+(((0.0286100000000000)*(x1)*(x4)))+(((-0.265280000000000)*(x45)))+(((x14)*(((((-0.0435000000000000)*(x45)))+(((0.0435000000000000)*(x46)))))))+(((x12)*(((((0.0435000000000000)*(x43)))+(((0.0435000000000000)*(x39)))))))+(((0.0285000000000000)*(x41)))+(((0.300000000000000)*(x5)))+(((0.265280000000000)*(x46)))+(((0.0285000000000000)*(x40))));
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

class IKSolver {
public:
IKReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
j0=numeric_limits<IKReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IKReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IKReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IKReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IKReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IKReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.0435000000000000)*(r00)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.0435000000000000)*(r10)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.0836000000000000)+(pz)+(((-0.0435000000000000)*(r20))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
npx=((((py)*(r10)))+(((pz)*(r20)))+(((px)*(r00))));
npy=((((px)*(r01)))+(((pz)*(r21)))+(((py)*(r11))));
npz=((((py)*(r12)))+(((pz)*(r22)))+(((px)*(r02))));
rxp0_0=((((pz)*(r10)))+(((-1.00000000000000)*(py)*(r20))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((py)*(r00)))+(((-1.00000000000000)*(px)*(r10))));
rxp1_0=((((pz)*(r11)))+(((-1.00000000000000)*(py)*(r21))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
IKReal gconst0;
gconst0=((0.0347200000000000)+(npx));
IKReal gconst1;
gconst1=((-2.00000000000000)*(npy));
IKReal gconst2;
gconst2=((0.0347200000000000)+(((-1.00000000000000)*(npx))));
IKReal gconst3;
gconst3=((0.0228880737000000)+(((0.530560000000000)*(npx)))+(((-1.00000000000000)*(pp))));
IKReal gconst4;
gconst4=((-1.06112000000000)*(npy));
IKReal gconst5;
gconst5=((0.0228880737000000)+(((-1.00000000000000)*(pp)))+(((-0.530560000000000)*(npx))));
IKReal gconst6;
gconst6=((0.0347200000000000)+(npx));
IKReal gconst7;
gconst7=((-2.00000000000000)*(npy));
IKReal gconst8;
gconst8=((0.0347200000000000)+(((-1.00000000000000)*(npx))));
IKReal gconst9;
gconst9=((0.0228880737000000)+(((0.530560000000000)*(npx)))+(((-1.00000000000000)*(pp))));
IKReal gconst10;
gconst10=((-1.06112000000000)*(npy));
IKReal gconst11;
gconst11=((0.0228880737000000)+(((-1.00000000000000)*(pp)))+(((-0.530560000000000)*(npx))));
IKReal gconst12;
gconst12=-0.0572200000000000;
IKReal gconst13;
gconst13=-0.0572200000000000;
IKReal gconst14;
gconst14=0.0342000000000000;
IKReal gconst15;
gconst15=0.0342000000000000;
IKReal gconst16;
gconst16=-0.0572200000000000;
IKReal gconst17;
gconst17=-0.0572200000000000;
IKReal gconst18;
gconst18=0.0342000000000000;
IKReal gconst19;
gconst19=0.0342000000000000;
IKReal gconst20;
gconst20=((-0.565280000000000)+(npx));
IKReal gconst21;
gconst21=((-2.00000000000000)*(npy));
IKReal gconst22;
gconst22=((-0.565280000000000)+(((-1.00000000000000)*(npx))));
IKReal gconst23;
gconst23=((0.0196265337000000)+(((0.530560000000000)*(npx)))+(((-1.00000000000000)*(pp))));
IKReal gconst24;
gconst24=((-1.06112000000000)*(npy));
IKReal gconst25;
gconst25=((0.0196265337000000)+(((-1.00000000000000)*(pp)))+(((-0.530560000000000)*(npx))));
IKReal gconst26;
gconst26=((-0.565280000000000)+(npx));
IKReal gconst27;
gconst27=((-2.00000000000000)*(npy));
IKReal gconst28;
gconst28=((-0.565280000000000)+(((-1.00000000000000)*(npx))));
IKReal gconst29;
gconst29=((0.0196265337000000)+(((0.530560000000000)*(npx)))+(((-1.00000000000000)*(pp))));
IKReal gconst30;
gconst30=((-1.06112000000000)*(npy));
IKReal gconst31;
gconst31=((0.0196265337000000)+(((-1.00000000000000)*(pp)))+(((-0.530560000000000)*(npx))));
dummyeval[0]=((((gconst21)*(gconst25)*(gconst26)*(gconst30)))+(((gconst20)*(gconst25)*(gconst28)*(gconst29)))+(((gconst22)*(gconst24)*(gconst27)*(gconst29)))+(((gconst22)*(gconst23)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst22)*(gconst23)*(gconst28)*(gconst29)))+(((-1.00000000000000)*(gconst20)*(gconst25)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst21)*(gconst25)*(gconst27)*(gconst29)))+(((-1.00000000000000)*(gconst22)*(gconst24)*(gconst26)*(gconst30))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IKReal op[8+1], zeror[8];
int numroots;
op[0]=((((gconst21)*(gconst25)*(gconst26)*(gconst30)))+(((gconst20)*(gconst25)*(gconst28)*(gconst29)))+(((gconst22)*(gconst24)*(gconst27)*(gconst29)))+(((gconst22)*(gconst23)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst22)*(gconst23)*(gconst28)*(gconst29)))+(((-1.00000000000000)*(gconst20)*(gconst25)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst21)*(gconst25)*(gconst27)*(gconst29)))+(((-1.00000000000000)*(gconst22)*(gconst24)*(gconst26)*(gconst30))));
op[1]=((((gconst15)*(gconst20)*(gconst28)*(gconst29)))+(((-1.00000000000000)*(gconst13)*(gconst23)*(gconst28)*(gconst29)))+(((-1.00000000000000)*(gconst16)*(gconst22)*(gconst24)*(gconst30)))+(((-1.00000000000000)*(gconst14)*(gconst22)*(gconst28)*(gconst29)))+(((gconst16)*(gconst22)*(gconst23)*(gconst31)))+(((gconst16)*(gconst21)*(gconst25)*(gconst30)))+(((gconst19)*(gconst22)*(gconst23)*(gconst26)))+(((gconst18)*(gconst22)*(gconst24)*(gconst27)))+(((gconst17)*(gconst20)*(gconst25)*(gconst29)))+(((gconst12)*(gconst25)*(gconst28)*(gconst29)))+(((-1.00000000000000)*(gconst18)*(gconst22)*(gconst23)*(gconst28)))+(((-1.00000000000000)*(gconst15)*(gconst21)*(gconst27)*(gconst29)))+(((-1.00000000000000)*(gconst16)*(gconst20)*(gconst25)*(gconst31)))+(((gconst13)*(gconst23)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst13)*(gconst24)*(gconst26)*(gconst30)))+(((-1.00000000000000)*(gconst12)*(gconst25)*(gconst26)*(gconst31)))+(((gconst18)*(gconst20)*(gconst25)*(gconst28)))+(((-1.00000000000000)*(gconst19)*(gconst20)*(gconst25)*(gconst26)))+(((-1.00000000000000)*(gconst17)*(gconst22)*(gconst23)*(gconst29)))+(((gconst15)*(gconst21)*(gconst26)*(gconst30)))+(((gconst14)*(gconst22)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst15)*(gconst20)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst18)*(gconst21)*(gconst25)*(gconst27)))+(((gconst13)*(gconst24)*(gconst27)*(gconst29))));
op[2]=((((gconst12)*(gconst18)*(gconst25)*(gconst28)))+(((gconst13)*(gconst14)*(gconst26)*(gconst31)))+(((gconst16)*(gconst19)*(gconst22)*(gconst23)))+(((-1.00000000000000)*(gconst22)*(gconst26)*(gconst30)*(gconst4)))+(((gconst22)*(gconst24)*(gconst27)*(gconst9)))+(((-1.00000000000000)*(gconst12)*(gconst16)*(gconst25)*(gconst31)))+(((gconst22)*(gconst27)*(gconst29)*(gconst4)))+(((-1.00000000000000)*(gconst1)*(gconst25)*(gconst27)*(gconst29)))+(((-1.00000000000000)*(gconst21)*(gconst25)*(gconst29)*(gconst7)))+(((gconst22)*(gconst24)*(gconst29)*(gconst7)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst23)*(gconst29)))+(((-1.00000000000000)*(gconst2)*(gconst23)*(gconst28)*(gconst29)))+(((-1.00000000000000)*(gconst22)*(gconst28)*(gconst29)*(gconst3)))+(((gconst15)*(gconst17)*(gconst20)*(gconst29)))+(((-1.00000000000000)*(gconst21)*(gconst25)*(gconst27)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst16)*(gconst24)*(gconst30)))+(((gconst13)*(gconst16)*(gconst23)*(gconst31)))+(((-1.00000000000000)*(gconst22)*(gconst23)*(gconst29)*(gconst8)))+(((-1.00000000000000)*(gconst12)*(gconst15)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst16)*(gconst19)*(gconst20)*(gconst25)))+(((-1.00000000000000)*(gconst14)*(gconst17)*(gconst22)*(gconst29)))+(((gconst17)*(gconst18)*(gconst20)*(gconst25)))+(((-1.00000000000000)*(gconst12)*(gconst19)*(gconst25)*(gconst26)))+(((gconst20)*(gconst25)*(gconst29)*(gconst8)))+(((gconst15)*(gconst16)*(gconst21)*(gconst30)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst22)*(gconst28)))+(((-1.00000000000000)*(gconst15)*(gconst18)*(gconst21)*(gconst27)))+(((gconst2)*(gconst23)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst15)*(gconst19)*(gconst20)*(gconst26)))+(((-1.00000000000000)*(gconst17)*(gconst18)*(gconst22)*(gconst23)))+(((-1.00000000000000)*(gconst20)*(gconst26)*(gconst31)*(gconst5)))+(((gconst0)*(gconst25)*(gconst28)*(gconst29)))+(((gconst21)*(gconst25)*(gconst30)*(gconst6)))+(((-1.00000000000000)*(gconst15)*(gconst16)*(gconst20)*(gconst31)))+(((gconst22)*(gconst26)*(gconst3)*(gconst31)))+(((gconst14)*(gconst19)*(gconst22)*(gconst26)))+(((-1.00000000000000)*(gconst22)*(gconst23)*(gconst28)*(gconst9)))+(((gconst13)*(gconst18)*(gconst24)*(gconst27)))+(((gconst2)*(gconst24)*(gconst27)*(gconst29)))+(((gconst15)*(gconst18)*(gconst20)*(gconst28)))+(((gconst13)*(gconst19)*(gconst23)*(gconst26)))+(((-1.00000000000000)*(gconst13)*(gconst18)*(gconst23)*(gconst28)))+(((-1.00000000000000)*(gconst21)*(gconst27)*(gconst29)*(gconst5)))+(((gconst12)*(gconst15)*(gconst28)*(gconst29)))+(((-1.00000000000000)*(gconst2)*(gconst24)*(gconst26)*(gconst30)))+(((-1.00000000000000)*(gconst20)*(gconst25)*(gconst31)*(gconst6)))+(((gconst11)*(gconst22)*(gconst23)*(gconst26)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst28)*(gconst29)))+(((-1.00000000000000)*(gconst11)*(gconst20)*(gconst25)*(gconst26)))+(((-1.00000000000000)*(gconst22)*(gconst24)*(gconst30)*(gconst6)))+(((gconst20)*(gconst28)*(gconst29)*(gconst5)))+(((gconst12)*(gconst17)*(gconst25)*(gconst29)))+(((gconst22)*(gconst23)*(gconst31)*(gconst6)))+(((gconst20)*(gconst25)*(gconst28)*(gconst9)))+(((gconst10)*(gconst21)*(gconst25)*(gconst26)))+(((gconst14)*(gconst16)*(gconst22)*(gconst31)))+(((gconst1)*(gconst25)*(gconst26)*(gconst30)))+(((gconst21)*(gconst26)*(gconst30)*(gconst5)))+(((-1.00000000000000)*(gconst0)*(gconst25)*(gconst26)*(gconst31)))+(((-1.00000000000000)*(gconst10)*(gconst22)*(gconst24)*(gconst26))));
op[3]=((((gconst11)*(gconst13)*(gconst23)*(gconst26)))+(((gconst18)*(gconst22)*(gconst24)*(gconst7)))+(((gconst16)*(gconst21)*(gconst30)*(gconst5)))+(((-1.00000000000000)*(gconst18)*(gconst22)*(gconst23)*(gconst8)))+(((gconst0)*(gconst17)*(gconst25)*(gconst29)))+(((-1.00000000000000)*(gconst16)*(gconst22)*(gconst30)*(gconst4)))+(((-1.00000000000000)*(gconst12)*(gconst16)*(gconst19)*(gconst25)))+(((gconst18)*(gconst20)*(gconst28)*(gconst5)))+(((gconst15)*(gconst17)*(gconst18)*(gconst20)))+(((gconst10)*(gconst16)*(gconst21)*(gconst25)))+(((gconst18)*(gconst20)*(gconst25)*(gconst8)))+(((-1.00000000000000)*(gconst17)*(gconst22)*(gconst29)*(gconst3)))+(((gconst17)*(gconst20)*(gconst29)*(gconst5)))+(((-1.00000000000000)*(gconst17)*(gconst2)*(gconst23)*(gconst29)))+(((gconst15)*(gconst20)*(gconst29)*(gconst8)))+(((gconst13)*(gconst23)*(gconst31)*(gconst6)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst25)*(gconst26)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst18)*(gconst23)))+(((-1.00000000000000)*(gconst14)*(gconst2)*(gconst28)*(gconst29)))+(((-1.00000000000000)*(gconst11)*(gconst16)*(gconst20)*(gconst25)))+(((gconst15)*(gconst20)*(gconst28)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst15)*(gconst26)*(gconst31)))+(((gconst17)*(gconst20)*(gconst25)*(gconst9)))+(((gconst0)*(gconst18)*(gconst25)*(gconst28)))+(((gconst12)*(gconst25)*(gconst29)*(gconst8)))+(((-1.00000000000000)*(gconst13)*(gconst28)*(gconst29)*(gconst3)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst17)*(gconst29)))+(((gconst15)*(gconst21)*(gconst30)*(gconst6)))+(((gconst19)*(gconst22)*(gconst23)*(gconst6)))+(((gconst14)*(gconst2)*(gconst26)*(gconst31)))+(((gconst11)*(gconst14)*(gconst22)*(gconst26)))+(((gconst12)*(gconst15)*(gconst17)*(gconst29)))+(((gconst16)*(gconst22)*(gconst3)*(gconst31)))+(((-1.00000000000000)*(gconst1)*(gconst15)*(gconst27)*(gconst29)))+(((-1.00000000000000)*(gconst10)*(gconst16)*(gconst22)*(gconst24)))+(((gconst13)*(gconst14)*(gconst16)*(gconst31)))+(((-1.00000000000000)*(gconst18)*(gconst22)*(gconst28)*(gconst3)))+(((-1.00000000000000)*(gconst11)*(gconst15)*(gconst20)*(gconst26)))+(((gconst13)*(gconst27)*(gconst29)*(gconst4)))+(((-1.00000000000000)*(gconst19)*(gconst20)*(gconst26)*(gconst5)))+(((gconst19)*(gconst2)*(gconst23)*(gconst26)))+(((gconst13)*(gconst16)*(gconst19)*(gconst23)))+(((-1.00000000000000)*(gconst16)*(gconst2)*(gconst24)*(gconst30)))+(((gconst13)*(gconst24)*(gconst29)*(gconst7)))+(((gconst12)*(gconst15)*(gconst18)*(gconst28)))+(((gconst13)*(gconst24)*(gconst27)*(gconst9)))+(((gconst12)*(gconst28)*(gconst29)*(gconst5)))+(((-1.00000000000000)*(gconst13)*(gconst23)*(gconst28)*(gconst9)))+(((gconst18)*(gconst2)*(gconst24)*(gconst27)))+(((-1.00000000000000)*(gconst12)*(gconst26)*(gconst31)*(gconst5)))+(((-1.00000000000000)*(gconst18)*(gconst21)*(gconst27)*(gconst5)))+(((gconst1)*(gconst16)*(gconst25)*(gconst30)))+(((-1.00000000000000)*(gconst13)*(gconst23)*(gconst29)*(gconst8)))+(((gconst12)*(gconst17)*(gconst18)*(gconst25)))+(((gconst18)*(gconst22)*(gconst27)*(gconst4)))+(((-1.00000000000000)*(gconst12)*(gconst15)*(gconst16)*(gconst31)))+(((gconst1)*(gconst15)*(gconst26)*(gconst30)))+(((-1.00000000000000)*(gconst12)*(gconst25)*(gconst31)*(gconst6)))+(((-1.00000000000000)*(gconst12)*(gconst15)*(gconst19)*(gconst26)))+(((gconst11)*(gconst16)*(gconst22)*(gconst23)))+(((gconst13)*(gconst14)*(gconst19)*(gconst26)))+(((-1.00000000000000)*(gconst19)*(gconst20)*(gconst25)*(gconst6)))+(((-1.00000000000000)*(gconst1)*(gconst18)*(gconst25)*(gconst27)))+(((gconst0)*(gconst15)*(gconst28)*(gconst29)))+(((-1.00000000000000)*(gconst18)*(gconst2)*(gconst23)*(gconst28)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst24)*(gconst26)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst18)*(gconst28)))+(((-1.00000000000000)*(gconst13)*(gconst24)*(gconst30)*(gconst6)))+(((-1.00000000000000)*(gconst15)*(gconst21)*(gconst29)*(gconst7)))+(((-1.00000000000000)*(gconst17)*(gconst22)*(gconst23)*(gconst9)))+(((-1.00000000000000)*(gconst15)*(gconst21)*(gconst27)*(gconst9)))+(((gconst13)*(gconst26)*(gconst3)*(gconst31)))+(((gconst12)*(gconst25)*(gconst28)*(gconst9)))+(((-1.00000000000000)*(gconst16)*(gconst20)*(gconst31)*(gconst5)))+(((-1.00000000000000)*(gconst13)*(gconst26)*(gconst30)*(gconst4)))+(((-1.00000000000000)*(gconst14)*(gconst22)*(gconst28)*(gconst9)))+(((-1.00000000000000)*(gconst18)*(gconst21)*(gconst25)*(gconst7)))+(((-1.00000000000000)*(gconst14)*(gconst22)*(gconst29)*(gconst8)))+(((gconst14)*(gconst16)*(gconst19)*(gconst22)))+(((gconst14)*(gconst22)*(gconst31)*(gconst6)))+(((gconst16)*(gconst2)*(gconst23)*(gconst31)))+(((-1.00000000000000)*(gconst14)*(gconst17)*(gconst18)*(gconst22)))+(((-1.00000000000000)*(gconst0)*(gconst19)*(gconst25)*(gconst26)))+(((-1.00000000000000)*(gconst15)*(gconst16)*(gconst19)*(gconst20)))+(((-1.00000000000000)*(gconst0)*(gconst16)*(gconst25)*(gconst31)))+(((-1.00000000000000)*(gconst15)*(gconst20)*(gconst31)*(gconst6)))+(((gconst19)*(gconst22)*(gconst26)*(gconst3)))+(((gconst10)*(gconst15)*(gconst21)*(gconst26))));
op[4]=((((gconst2)*(gconst26)*(gconst3)*(gconst31)))+(((gconst11)*(gconst2)*(gconst23)*(gconst26)))+(((gconst15)*(gconst17)*(gconst20)*(gconst9)))+(((gconst1)*(gconst15)*(gconst16)*(gconst30)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst29)*(gconst3)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst28)*(gconst9)))+(((-1.00000000000000)*(gconst11)*(gconst20)*(gconst26)*(gconst5)))+(((-1.00000000000000)*(gconst21)*(gconst27)*(gconst5)*(gconst9)))+(((gconst0)*(gconst15)*(gconst17)*(gconst29)))+(((-1.00000000000000)*(gconst12)*(gconst15)*(gconst31)*(gconst6)))+(((gconst1)*(gconst10)*(gconst25)*(gconst26)))+(((gconst12)*(gconst17)*(gconst25)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst18)*(gconst28)*(gconst3)))+(((gconst0)*(gconst25)*(gconst28)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst26)*(gconst31)*(gconst5)))+(((gconst16)*(gconst19)*(gconst2)*(gconst23)))+(((-1.00000000000000)*(gconst14)*(gconst17)*(gconst22)*(gconst9)))+(((gconst13)*(gconst18)*(gconst27)*(gconst4)))+(((-1.00000000000000)*(gconst13)*(gconst18)*(gconst23)*(gconst8)))+(((gconst2)*(gconst24)*(gconst27)*(gconst9)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst16)*(gconst25)))+(((-1.00000000000000)*(gconst10)*(gconst2)*(gconst24)*(gconst26)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst17)*(gconst18)))+(((gconst0)*(gconst17)*(gconst18)*(gconst25)))+(((gconst11)*(gconst13)*(gconst16)*(gconst23)))+(((-1.00000000000000)*(gconst22)*(gconst29)*(gconst3)*(gconst8)))+(((-1.00000000000000)*(gconst11)*(gconst20)*(gconst25)*(gconst6)))+(((gconst20)*(gconst25)*(gconst8)*(gconst9)))+(((gconst2)*(gconst23)*(gconst31)*(gconst6)))+(((-1.00000000000000)*(gconst2)*(gconst23)*(gconst29)*(gconst8)))+(((-1.00000000000000)*(gconst0)*(gconst15)*(gconst19)*(gconst26)))+(((-1.00000000000000)*(gconst11)*(gconst15)*(gconst16)*(gconst20)))+(((gconst0)*(gconst28)*(gconst29)*(gconst5)))+(((-1.00000000000000)*(gconst0)*(gconst15)*(gconst16)*(gconst31)))+(((gconst1)*(gconst26)*(gconst30)*(gconst5)))+(((gconst22)*(gconst3)*(gconst31)*(gconst6)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst29)*(gconst8)))+(((gconst14)*(gconst19)*(gconst2)*(gconst26)))+(((-1.00000000000000)*(gconst2)*(gconst26)*(gconst30)*(gconst4)))+(((-1.00000000000000)*(gconst22)*(gconst28)*(gconst3)*(gconst9)))+(((gconst10)*(gconst15)*(gconst16)*(gconst21)))+(((-1.00000000000000)*(gconst15)*(gconst19)*(gconst20)*(gconst6)))+(((gconst16)*(gconst19)*(gconst22)*(gconst3)))+(((-1.00000000000000)*(gconst12)*(gconst19)*(gconst25)*(gconst6)))+(((-1.00000000000000)*(gconst1)*(gconst25)*(gconst29)*(gconst7)))+(((gconst11)*(gconst22)*(gconst26)*(gconst3)))+(((gconst22)*(gconst27)*(gconst4)*(gconst9)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst15)*(gconst26)))+(((gconst14)*(gconst16)*(gconst2)*(gconst31)))+(((-1.00000000000000)*(gconst21)*(gconst29)*(gconst5)*(gconst7)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst23)*(gconst9)))+(((-1.00000000000000)*(gconst17)*(gconst18)*(gconst2)*(gconst23)))+(((gconst13)*(gconst19)*(gconst23)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst16)*(gconst24)))+(((-1.00000000000000)*(gconst1)*(gconst25)*(gconst27)*(gconst9)))+(((gconst22)*(gconst24)*(gconst7)*(gconst9)))+(((gconst12)*(gconst18)*(gconst28)*(gconst5)))+(((gconst12)*(gconst15)*(gconst29)*(gconst8)))+(((gconst12)*(gconst15)*(gconst28)*(gconst9)))+(((-1.00000000000000)*(gconst12)*(gconst15)*(gconst16)*(gconst19)))+(((gconst15)*(gconst18)*(gconst20)*(gconst8)))+(((-1.00000000000000)*(gconst15)*(gconst18)*(gconst21)*(gconst7)))+(((gconst12)*(gconst15)*(gconst17)*(gconst18)))+(((-1.00000000000000)*(gconst10)*(gconst22)*(gconst24)*(gconst6)))+(((gconst0)*(gconst25)*(gconst29)*(gconst8)))+(((gconst13)*(gconst18)*(gconst24)*(gconst7)))+(((-1.00000000000000)*(gconst22)*(gconst23)*(gconst8)*(gconst9)))+(((gconst11)*(gconst13)*(gconst14)*(gconst26)))+(((-1.00000000000000)*(gconst12)*(gconst19)*(gconst26)*(gconst5)))+(((-1.00000000000000)*(gconst17)*(gconst18)*(gconst22)*(gconst3)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst25)*(gconst26)))+(((-1.00000000000000)*(gconst2)*(gconst24)*(gconst30)*(gconst6)))+(((gconst2)*(gconst27)*(gconst29)*(gconst4)))+(((-1.00000000000000)*(gconst1)*(gconst15)*(gconst18)*(gconst27)))+(((-1.00000000000000)*(gconst1)*(gconst27)*(gconst29)*(gconst5)))+(((gconst20)*(gconst29)*(gconst5)*(gconst8)))+(((gconst13)*(gconst14)*(gconst16)*(gconst19)))+(((gconst13)*(gconst14)*(gconst31)*(gconst6)))+(((-1.00000000000000)*(gconst13)*(gconst16)*(gconst30)*(gconst4)))+(((-1.00000000000000)*(gconst2)*(gconst28)*(gconst29)*(gconst3)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst2)*(gconst28)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst22)*(gconst8)))+(((gconst0)*(gconst15)*(gconst18)*(gconst28)))+(((gconst14)*(gconst19)*(gconst22)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst22)*(gconst26)*(gconst4)))+(((gconst22)*(gconst29)*(gconst4)*(gconst7)))+(((-1.00000000000000)*(gconst22)*(gconst30)*(gconst4)*(gconst6)))+(((-1.00000000000000)*(gconst21)*(gconst25)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst16)*(gconst19)*(gconst25)))+(((-1.00000000000000)*(gconst12)*(gconst16)*(gconst31)*(gconst5)))+(((gconst11)*(gconst22)*(gconst23)*(gconst6)))+(((-1.00000000000000)*(gconst0)*(gconst25)*(gconst31)*(gconst6)))+(((gconst10)*(gconst21)*(gconst26)*(gconst5)))+(((gconst11)*(gconst14)*(gconst16)*(gconst22)))+(((gconst12)*(gconst18)*(gconst25)*(gconst8)))+(((gconst13)*(gconst19)*(gconst26)*(gconst3)))+(((-1.00000000000000)*(gconst16)*(gconst19)*(gconst20)*(gconst5)))+(((gconst21)*(gconst30)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst14)*(gconst17)*(gconst2)*(gconst29)))+(((gconst20)*(gconst28)*(gconst5)*(gconst9)))+(((gconst12)*(gconst17)*(gconst29)*(gconst5)))+(((gconst13)*(gconst16)*(gconst3)*(gconst31)))+(((gconst2)*(gconst24)*(gconst29)*(gconst7)))+(((gconst17)*(gconst18)*(gconst20)*(gconst5)))+(((-1.00000000000000)*(gconst2)*(gconst23)*(gconst28)*(gconst9)))+(((gconst10)*(gconst21)*(gconst25)*(gconst6)))+(((-1.00000000000000)*(gconst20)*(gconst31)*(gconst5)*(gconst6)))+(((gconst1)*(gconst25)*(gconst30)*(gconst6))));
op[5]=((((-1.00000000000000)*(gconst13)*(gconst17)*(gconst18)*(gconst3)))+(((gconst13)*(gconst16)*(gconst19)*(gconst3)))+(((-1.00000000000000)*(gconst17)*(gconst2)*(gconst29)*(gconst3)))+(((-1.00000000000000)*(gconst11)*(gconst16)*(gconst20)*(gconst5)))+(((-1.00000000000000)*(gconst14)*(gconst2)*(gconst29)*(gconst8)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst26)*(gconst4)))+(((gconst11)*(gconst13)*(gconst26)*(gconst3)))+(((-1.00000000000000)*(gconst13)*(gconst23)*(gconst8)*(gconst9)))+(((gconst19)*(gconst2)*(gconst26)*(gconst3)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst15)*(gconst16)))+(((-1.00000000000000)*(gconst18)*(gconst22)*(gconst3)*(gconst8)))+(((-1.00000000000000)*(gconst0)*(gconst15)*(gconst31)*(gconst6)))+(((gconst11)*(gconst13)*(gconst23)*(gconst6)))+(((gconst18)*(gconst2)*(gconst24)*(gconst7)))+(((gconst19)*(gconst22)*(gconst3)*(gconst6)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst17)*(gconst9)))+(((gconst18)*(gconst22)*(gconst4)*(gconst7)))+(((-1.00000000000000)*(gconst11)*(gconst15)*(gconst20)*(gconst6)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst25)*(gconst6)))+(((-1.00000000000000)*(gconst12)*(gconst15)*(gconst19)*(gconst6)))+(((-1.00000000000000)*(gconst14)*(gconst22)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst15)*(gconst29)*(gconst7)))+(((gconst0)*(gconst15)*(gconst17)*(gconst18)))+(((-1.00000000000000)*(gconst10)*(gconst16)*(gconst22)*(gconst4)))+(((gconst0)*(gconst18)*(gconst28)*(gconst5)))+(((gconst11)*(gconst16)*(gconst2)*(gconst23)))+(((-1.00000000000000)*(gconst16)*(gconst2)*(gconst30)*(gconst4)))+(((-1.00000000000000)*(gconst17)*(gconst22)*(gconst3)*(gconst9)))+(((-1.00000000000000)*(gconst14)*(gconst17)*(gconst18)*(gconst2)))+(((gconst12)*(gconst29)*(gconst5)*(gconst8)))+(((gconst10)*(gconst15)*(gconst21)*(gconst6)))+(((gconst1)*(gconst15)*(gconst30)*(gconst6)))+(((gconst0)*(gconst17)*(gconst25)*(gconst9)))+(((-1.00000000000000)*(gconst19)*(gconst20)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst1)*(gconst18)*(gconst27)*(gconst5)))+(((-1.00000000000000)*(gconst17)*(gconst2)*(gconst23)*(gconst9)))+(((gconst12)*(gconst15)*(gconst18)*(gconst8)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst26)*(gconst5)))+(((gconst13)*(gconst29)*(gconst4)*(gconst7)))+(((gconst12)*(gconst25)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst18)*(gconst21)*(gconst5)*(gconst7)))+(((gconst12)*(gconst15)*(gconst17)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst29)*(gconst3)*(gconst8)))+(((gconst11)*(gconst16)*(gconst22)*(gconst3)))+(((gconst13)*(gconst14)*(gconst19)*(gconst6)))+(((gconst13)*(gconst27)*(gconst4)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst16)*(gconst25)))+(((gconst13)*(gconst24)*(gconst7)*(gconst9)))+(((gconst1)*(gconst16)*(gconst30)*(gconst5)))+(((gconst0)*(gconst17)*(gconst29)*(gconst5)))+(((-1.00000000000000)*(gconst12)*(gconst31)*(gconst5)*(gconst6)))+(((gconst11)*(gconst14)*(gconst2)*(gconst26)))+(((gconst12)*(gconst28)*(gconst5)*(gconst9)))+(((gconst0)*(gconst15)*(gconst29)*(gconst8)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst15)*(gconst26)))+(((gconst0)*(gconst15)*(gconst28)*(gconst9)))+(((-1.00000000000000)*(gconst14)*(gconst2)*(gconst28)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst18)*(gconst25)*(gconst7)))+(((gconst15)*(gconst20)*(gconst8)*(gconst9)))+(((gconst1)*(gconst10)*(gconst16)*(gconst25)))+(((gconst19)*(gconst2)*(gconst23)*(gconst6)))+(((-1.00000000000000)*(gconst18)*(gconst2)*(gconst23)*(gconst8)))+(((-1.00000000000000)*(gconst10)*(gconst16)*(gconst2)*(gconst24)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst18)*(gconst8)))+(((gconst16)*(gconst2)*(gconst3)*(gconst31)))+(((-1.00000000000000)*(gconst13)*(gconst30)*(gconst4)*(gconst6)))+(((gconst11)*(gconst13)*(gconst14)*(gconst16)))+(((-1.00000000000000)*(gconst18)*(gconst2)*(gconst28)*(gconst3)))+(((-1.00000000000000)*(gconst12)*(gconst16)*(gconst19)*(gconst5)))+(((gconst12)*(gconst17)*(gconst18)*(gconst5)))+(((-1.00000000000000)*(gconst0)*(gconst19)*(gconst25)*(gconst6)))+(((gconst11)*(gconst14)*(gconst22)*(gconst6)))+(((-1.00000000000000)*(gconst0)*(gconst19)*(gconst26)*(gconst5)))+(((gconst0)*(gconst18)*(gconst25)*(gconst8)))+(((gconst14)*(gconst16)*(gconst19)*(gconst2)))+(((-1.00000000000000)*(gconst15)*(gconst21)*(gconst7)*(gconst9)))+(((gconst13)*(gconst3)*(gconst31)*(gconst6)))+(((-1.00000000000000)*(gconst1)*(gconst15)*(gconst27)*(gconst9)))+(((gconst10)*(gconst16)*(gconst21)*(gconst5)))+(((gconst18)*(gconst20)*(gconst5)*(gconst8)))+(((gconst1)*(gconst10)*(gconst15)*(gconst26)))+(((-1.00000000000000)*(gconst0)*(gconst15)*(gconst16)*(gconst19)))+(((-1.00000000000000)*(gconst13)*(gconst28)*(gconst3)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst16)*(gconst31)*(gconst5)))+(((gconst18)*(gconst2)*(gconst27)*(gconst4)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst24)*(gconst6)))+(((gconst17)*(gconst20)*(gconst5)*(gconst9)))+(((gconst14)*(gconst2)*(gconst31)*(gconst6))));
op[6]=((((gconst1)*(gconst30)*(gconst5)*(gconst6)))+(((gconst14)*(gconst19)*(gconst2)*(gconst6)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst16)*(gconst5)))+(((-1.00000000000000)*(gconst17)*(gconst18)*(gconst2)*(gconst3)))+(((-1.00000000000000)*(gconst1)*(gconst15)*(gconst18)*(gconst7)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst8)*(gconst9)))+(((gconst11)*(gconst13)*(gconst14)*(gconst6)))+(((gconst11)*(gconst22)*(gconst3)*(gconst6)))+(((gconst11)*(gconst2)*(gconst23)*(gconst6)))+(((gconst13)*(gconst19)*(gconst3)*(gconst6)))+(((gconst11)*(gconst2)*(gconst26)*(gconst3)))+(((-1.00000000000000)*(gconst10)*(gconst22)*(gconst4)*(gconst6)))+(((-1.00000000000000)*(gconst21)*(gconst5)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst16)*(gconst4)))+(((-1.00000000000000)*(gconst2)*(gconst23)*(gconst8)*(gconst9)))+(((gconst12)*(gconst15)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst16)*(gconst19)*(gconst5)))+(((-1.00000000000000)*(gconst13)*(gconst18)*(gconst3)*(gconst8)))+(((gconst0)*(gconst17)*(gconst18)*(gconst5)))+(((gconst12)*(gconst17)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst14)*(gconst17)*(gconst2)*(gconst9)))+(((-1.00000000000000)*(gconst22)*(gconst3)*(gconst8)*(gconst9)))+(((gconst20)*(gconst5)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst11)*(gconst20)*(gconst5)*(gconst6)))+(((gconst2)*(gconst27)*(gconst4)*(gconst9)))+(((gconst2)*(gconst29)*(gconst4)*(gconst7)))+(((gconst0)*(gconst28)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst2)*(gconst24)*(gconst6)))+(((-1.00000000000000)*(gconst12)*(gconst19)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst2)*(gconst30)*(gconst4)*(gconst6)))+(((gconst22)*(gconst4)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst2)*(gconst8)))+(((-1.00000000000000)*(gconst0)*(gconst31)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst3)*(gconst9)))+(((gconst12)*(gconst18)*(gconst5)*(gconst8)))+(((-1.00000000000000)*(gconst1)*(gconst29)*(gconst5)*(gconst7)))+(((-1.00000000000000)*(gconst1)*(gconst27)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst2)*(gconst26)*(gconst4)))+(((gconst0)*(gconst29)*(gconst5)*(gconst8)))+(((-1.00000000000000)*(gconst2)*(gconst28)*(gconst3)*(gconst9)))+(((gconst1)*(gconst10)*(gconst25)*(gconst6)))+(((gconst11)*(gconst14)*(gconst16)*(gconst2)))+(((gconst10)*(gconst21)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst26)*(gconst5)))+(((-1.00000000000000)*(gconst0)*(gconst15)*(gconst19)*(gconst6)))+(((-1.00000000000000)*(gconst2)*(gconst29)*(gconst3)*(gconst8)))+(((gconst2)*(gconst24)*(gconst7)*(gconst9)))+(((gconst0)*(gconst15)*(gconst18)*(gconst8)))+(((gconst1)*(gconst10)*(gconst26)*(gconst5)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst15)*(gconst6)))+(((gconst1)*(gconst10)*(gconst15)*(gconst16)))+(((gconst11)*(gconst13)*(gconst16)*(gconst3)))+(((gconst0)*(gconst25)*(gconst8)*(gconst9)))+(((gconst16)*(gconst19)*(gconst2)*(gconst3)))+(((gconst0)*(gconst15)*(gconst17)*(gconst9)))+(((gconst13)*(gconst18)*(gconst4)*(gconst7)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst25)*(gconst6)))+(((gconst2)*(gconst3)*(gconst31)*(gconst6)))+(((-1.00000000000000)*(gconst1)*(gconst25)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst15)*(gconst16))));
op[7]=((((gconst11)*(gconst13)*(gconst3)*(gconst6)))+(((gconst1)*(gconst10)*(gconst16)*(gconst5)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst4)*(gconst6)))+(((gconst12)*(gconst5)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst15)*(gconst7)*(gconst9)))+(((gconst0)*(gconst17)*(gconst5)*(gconst9)))+(((gconst13)*(gconst4)*(gconst7)*(gconst9)))+(((gconst1)*(gconst10)*(gconst15)*(gconst6)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst18)*(gconst2)*(gconst3)*(gconst8)))+(((gconst0)*(gconst15)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst19)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst16)*(gconst5)))+(((gconst19)*(gconst2)*(gconst3)*(gconst6)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst15)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst16)*(gconst2)*(gconst4)))+(((gconst18)*(gconst2)*(gconst4)*(gconst7)))+(((gconst0)*(gconst18)*(gconst5)*(gconst8)))+(((gconst11)*(gconst14)*(gconst2)*(gconst6)))+(((gconst11)*(gconst16)*(gconst2)*(gconst3)))+(((-1.00000000000000)*(gconst17)*(gconst2)*(gconst3)*(gconst9)))+(((-1.00000000000000)*(gconst14)*(gconst2)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst3)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst18)*(gconst5)*(gconst7))));
op[8]=((((-1.00000000000000)*(gconst2)*(gconst3)*(gconst8)*(gconst9)))+(((gconst11)*(gconst2)*(gconst3)*(gconst6)))+(((gconst1)*(gconst10)*(gconst5)*(gconst6)))+(((gconst0)*(gconst5)*(gconst8)*(gconst9)))+(((gconst2)*(gconst4)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst2)*(gconst4)*(gconst6)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst1)*(gconst5)*(gconst7)*(gconst9))));
polyroots8(op,zeror,numroots);
IKReal j3array[8], cj3array[8], sj3array[8], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IKReal htj3 = zeror[ij3];
tempj3array[0]=((2.00000000000000)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[8]={true,true,true,true,true,true,true,true};
_nj3 = 8;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
IKReal dummyeval[1];
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IKReal x47=(npy)*(npy);
IKReal x48=((0.281493913600000)*(x47));
IKReal x49=(npx)*(npx);
IKReal x50=((0.281493913600000)*(x49));
IKReal x51=((x50)+(x48));
if( (x51) < (IKReal)-0.00001 )
    continue;
IKReal x52=IKsqrt(x51);
IKReal x53=IKabs(x52);
IKReal x54=((IKabs(x53) != 0)?((IKReal)1/(x53)):(IKReal)1.0e30);
IKReal x55=((0.00163077000000000)*(cj3));
IKReal x56=((0.0171000000000000)*(sj3));
IKReal x57=((0.0212573037000000)+(x55)+(x56));
IKReal x58=((x57)+(((-1.00000000000000)*(pp))));
IKReal x59=((x54)*(x58));
if( (x59) < -1-IKFAST_SINCOS_THRESH || (x59) > 1+IKFAST_SINCOS_THRESH )
    continue;
IKReal x60=IKasin(x59);
IKReal x61=((0.530560000000000)*(npx));
IKReal x62=((-0.530560000000000)*(npy));
if( IKabs(x61) < IKFAST_ATAN2_MAGTHRESH && IKabs(x62) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x63=IKatan2(x61, x62);
j5array[0]=((((-1.00000000000000)*(x63)))+(((-1.00000000000000)*(x60))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(x60)+(((-1.00000000000000)*(x63))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IKReal evalcond[1];
evalcond[0]=((-0.265280000000000)+(((-0.0286100000000000)*(sj3)))+(((0.300000000000000)*(cj3)))+(((npx)*(IKcos(j5))))+(((-1.00000000000000)*(npy)*(IKsin(j5)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst48;
gconst48=IKsign(((-0.0285000000000000)+(((-0.300000000000000)*(sj3)))+(((-0.0286100000000000)*(cj3)))));
dummyeval[0]=((-1.00000000000000)+(((-10.5263157894737)*(sj3)))+(((-1.00385964912281)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((-3.14159265358979)+(IKfmod(((0.000366660264346841)+(j3)), 6.28318530717959)));
evalcond[1]=((-0.565290469142600)+(((-1.00000000000000)*(npy)*(sj5)))+(((cj5)*(npx))));
evalcond[2]=((0.0196328037001539)+(((-0.530560000000000)*(npy)*(sj5)))+(((-1.00000000000000)*(pp)))+(((0.530560000000000)*(cj5)*(npx))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((370370370370.370)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((370370370370.370)*(cj5)*(npy)))+(((370370370370.370)*(npx)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((370370370370.370)*(npz)))+IKsqr(((((370370370370.370)*(cj5)*(npy)))+(((370370370370.370)*(npx)*(sj5)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((370370370370.370)*(npz)), ((((370370370370.370)*(cj5)*(npy)))+(((370370370370.370)*(npx)*(sj5)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[5];
IKReal x64=IKsin(j4);
IKReal x65=IKcos(j4);
evalcond[0]=((((-2.70000000000000e-12)*(x64)))+(npz));
evalcond[1]=((((-1.00000000000000)*(cj5)*(npy)*(x64)))+(((npz)*(x65)))+(((-1.00000000000000)*(npx)*(sj5)*(x64))));
evalcond[2]=((((-2.70000000000000e-12)*(x65)))+(((cj5)*(npy)))+(((npx)*(sj5))));
evalcond[3]=((-2.70000000000000e-12)+(((npx)*(sj5)*(x65)))+(((npz)*(x64)))+(((cj5)*(npy)*(x65))));
evalcond[4]=((0.0196328037000000)+(((-0.530560000000000)*(npy)*(sj5)))+(((0.0570000000000000)*(cj5)*(npy)*(x65)))+(((-1.00000000000000)*(pp)))+(((0.0570000000000000)*(npz)*(x64)))+(((0.0570000000000000)*(npx)*(sj5)*(x65)))+(((0.530560000000000)*(cj5)*(npx))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((-2.95180107280163)+(j3)), 6.28318530717959)));
evalcond[1]=((0.0347304708366476)+(((-1.00000000000000)*(npy)*(sj5)))+(((cj5)*(npx))));
evalcond[2]=((0.0196328037447955)+(((-0.530560000000000)*(npy)*(sj5)))+(((-1.00000000000000)*(pp)))+(((0.530560000000000)*(cj5)*(npx))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((1272447958.87319)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1272447958.87319)*(npx)*(sj5)))+(((1272447958.87319)*(cj5)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1272447958.87319)*(npz)))+IKsqr(((((1272447958.87319)*(npx)*(sj5)))+(((1272447958.87319)*(cj5)*(npy)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1272447958.87319)*(npz)), ((((1272447958.87319)*(npx)*(sj5)))+(((1272447958.87319)*(cj5)*(npy)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[5];
IKReal x109=IKsin(j4);
IKReal x110=IKcos(j4);
evalcond[0]=((npz)+(((-7.85886757117790e-10)*(x109))));
evalcond[1]=((((npz)*(x110)))+(((-1.00000000000000)*(npx)*(sj5)*(x109)))+(((-1.00000000000000)*(cj5)*(npy)*(x109))));
evalcond[2]=((((cj5)*(npy)))+(((-7.85886757117790e-10)*(x110)))+(((npx)*(sj5))));
evalcond[3]=((-7.85886757117790e-10)+(((npz)*(x109)))+(((npx)*(sj5)*(x110)))+(((cj5)*(npy)*(x110))));
evalcond[4]=((0.0196328037000000)+(((0.0570000000000000)*(npx)*(sj5)*(x110)))+(((-0.530560000000000)*(npy)*(sj5)))+(((0.0570000000000000)*(cj5)*(npy)*(x110)))+(((-1.00000000000000)*(pp)))+(((0.530560000000000)*(cj5)*(npx)))+(((0.0570000000000000)*(npz)*(x109))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.00000000000000)*(gconst48)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((-1.00000000000000)*(npx)*(sj5)))+(((-1.00000000000000)*(cj5)*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((-1.00000000000000)*(gconst48)*(npz)), ((gconst48)*(((((-1.00000000000000)*(npx)*(sj5)))+(((-1.00000000000000)*(cj5)*(npy)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[5];
IKReal x111=IKsin(j4);
IKReal x112=IKcos(j4);
evalcond[0]=((((-0.300000000000000)*(sj3)*(x111)))+(((-0.0286100000000000)*(cj3)*(x111)))+(npz)+(((-0.0285000000000000)*(x111))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(npy)*(x111)))+(((npz)*(x112)))+(((-1.00000000000000)*(npx)*(sj5)*(x111))));
evalcond[2]=((((-0.0286100000000000)*(cj3)*(x112)))+(((-0.300000000000000)*(sj3)*(x112)))+(((-0.0285000000000000)*(x112)))+(((cj5)*(npy)))+(((npx)*(sj5))));
evalcond[3]=((-0.0285000000000000)+(((npx)*(sj5)*(x112)))+(((npz)*(x111)))+(((-0.300000000000000)*(sj3)))+(((cj5)*(npy)*(x112)))+(((-0.0286100000000000)*(cj3))));
evalcond[4]=((0.0196328037000000)+(((-0.530560000000000)*(npy)*(sj5)))+(((0.0570000000000000)*(cj5)*(npy)*(x112)))+(((-1.00000000000000)*(pp)))+(((0.0570000000000000)*(npx)*(sj5)*(x112)))+(((0.0570000000000000)*(npz)*(x111)))+(((0.530560000000000)*(cj5)*(npx))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IKReal x113=(npy)*(npy);
IKReal x114=(npx)*(npx);
IKReal x115=((x113)+(x114));
if( (x115) < (IKReal)-0.00001 )
    continue;
IKReal x116=IKsqrt(x115);
IKReal x117=IKabs(x116);
IKReal x118=((IKabs(x117) != 0)?((IKReal)1/(x117)):(IKReal)1.0e30);
IKReal x119=((0.0286100000000000)*(sj3));
IKReal x120=((0.265280000000000)+(x119));
IKReal x121=((0.300000000000000)*(cj3));
IKReal x122=((x120)+(((-1.00000000000000)*(x121))));
IKReal x123=((x118)*(x122));
if( (x123) < -1-IKFAST_SINCOS_THRESH || (x123) > 1+IKFAST_SINCOS_THRESH )
    continue;
IKReal x124=IKasin(x123);
IKReal x125=((-1.00000000000000)*(npy));
if( IKabs(npx) < IKFAST_ATAN2_MAGTHRESH && IKabs(x125) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x126=IKatan2(npx, x125);
j5array[0]=((((-1.00000000000000)*(x126)))+(x124));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.00000000000000)*(x126)))+(((-1.00000000000000)*(x124))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IKReal evalcond[3];
IKReal x127=IKsin(j5);
IKReal x128=IKcos(j5);
evalcond[0]=((0.0212573037000000)+(((0.00163077000000000)*(cj3)))+(((-0.530560000000000)*(npy)*(x127)))+(((0.0171000000000000)*(sj3)))+(((0.530560000000000)*(npx)*(x128)))+(((-1.00000000000000)*(pp))));
evalcond[1]=((((npy)*(pp)))+(((-0.00163077000000000)*(cj3)*(npy)))+(((0.530560000000000)*(x127)*((npy)*(npy))))+(((-0.0171000000000000)*(npy)*(sj3)))+(((-0.530560000000000)*(npx)*(npy)*(x128)))+(((-0.0212573037000000)*(npy))));
evalcond[2]=((((npx)*(pp)))+(((0.530560000000000)*(npx)*(npy)*(x127)))+(((-0.530560000000000)*(x128)*((npx)*(npx))))+(((-0.00163077000000000)*(cj3)*(npx)))+(((-0.0171000000000000)*(npx)*(sj3)))+(((-0.0212573037000000)*(npx))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst48;
gconst48=IKsign(((-0.0285000000000000)+(((-0.300000000000000)*(sj3)))+(((-0.0286100000000000)*(cj3)))));
dummyeval[0]=((-1.00000000000000)+(((-10.5263157894737)*(sj3)))+(((-1.00385964912281)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((-3.14159265358979)+(IKfmod(((0.000366660264346841)+(j3)), 6.28318530717959)));
evalcond[1]=((-0.565290469142600)+(((-1.00000000000000)*(npy)*(sj5)))+(((cj5)*(npx))));
evalcond[2]=((0.0196328037001539)+(((-0.530560000000000)*(npy)*(sj5)))+(((-1.00000000000000)*(pp)))+(((0.530560000000000)*(cj5)*(npx))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((370370370370.370)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((370370370370.370)*(cj5)*(npy)))+(((370370370370.370)*(npx)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((370370370370.370)*(npz)))+IKsqr(((((370370370370.370)*(cj5)*(npy)))+(((370370370370.370)*(npx)*(sj5)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((370370370370.370)*(npz)), ((((370370370370.370)*(cj5)*(npy)))+(((370370370370.370)*(npx)*(sj5)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[5];
IKReal x129=IKsin(j4);
IKReal x130=IKcos(j4);
evalcond[0]=((npz)+(((-2.70000000000000e-12)*(x129))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(npy)*(x129)))+(((-1.00000000000000)*(npx)*(sj5)*(x129)))+(((npz)*(x130))));
evalcond[2]=((((-2.70000000000000e-12)*(x130)))+(((cj5)*(npy)))+(((npx)*(sj5))));
evalcond[3]=((-2.70000000000000e-12)+(((cj5)*(npy)*(x130)))+(((npx)*(sj5)*(x130)))+(((npz)*(x129))));
evalcond[4]=((0.0196328037000000)+(((-0.530560000000000)*(npy)*(sj5)))+(((0.0570000000000000)*(cj5)*(npy)*(x130)))+(((0.0570000000000000)*(npx)*(sj5)*(x130)))+(((-1.00000000000000)*(pp)))+(((0.530560000000000)*(cj5)*(npx)))+(((0.0570000000000000)*(npz)*(x129))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((-2.95180107280163)+(j3)), 6.28318530717959)));
evalcond[1]=((0.0347304708366476)+(((-1.00000000000000)*(npy)*(sj5)))+(((cj5)*(npx))));
evalcond[2]=((0.0196328037447955)+(((-0.530560000000000)*(npy)*(sj5)))+(((-1.00000000000000)*(pp)))+(((0.530560000000000)*(cj5)*(npx))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((1272447958.87319)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1272447958.87319)*(npx)*(sj5)))+(((1272447958.87319)*(cj5)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1272447958.87319)*(npz)))+IKsqr(((((1272447958.87319)*(npx)*(sj5)))+(((1272447958.87319)*(cj5)*(npy)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1272447958.87319)*(npz)), ((((1272447958.87319)*(npx)*(sj5)))+(((1272447958.87319)*(cj5)*(npy)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[5];
IKReal x131=IKsin(j4);
IKReal x132=IKcos(j4);
evalcond[0]=((((-7.85886757117790e-10)*(x131)))+(npz));
evalcond[1]=((((-1.00000000000000)*(npx)*(sj5)*(x131)))+(((npz)*(x132)))+(((-1.00000000000000)*(cj5)*(npy)*(x131))));
evalcond[2]=((((cj5)*(npy)))+(((npx)*(sj5)))+(((-7.85886757117790e-10)*(x132))));
evalcond[3]=((-7.85886757117790e-10)+(((npx)*(sj5)*(x132)))+(((cj5)*(npy)*(x132)))+(((npz)*(x131))));
evalcond[4]=((0.0196328037000000)+(((-0.530560000000000)*(npy)*(sj5)))+(((0.0570000000000000)*(npx)*(sj5)*(x132)))+(((-1.00000000000000)*(pp)))+(((0.0570000000000000)*(npz)*(x131)))+(((0.530560000000000)*(cj5)*(npx)))+(((0.0570000000000000)*(cj5)*(npy)*(x132))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.00000000000000)*(gconst48)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((-1.00000000000000)*(npx)*(sj5)))+(((-1.00000000000000)*(cj5)*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((-1.00000000000000)*(gconst48)*(npz)), ((gconst48)*(((((-1.00000000000000)*(npx)*(sj5)))+(((-1.00000000000000)*(cj5)*(npy)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[5];
IKReal x133=IKsin(j4);
IKReal x134=IKcos(j4);
evalcond[0]=((npz)+(((-0.0285000000000000)*(x133)))+(((-0.0286100000000000)*(cj3)*(x133)))+(((-0.300000000000000)*(sj3)*(x133))));
evalcond[1]=((((npz)*(x134)))+(((-1.00000000000000)*(cj5)*(npy)*(x133)))+(((-1.00000000000000)*(npx)*(sj5)*(x133))));
evalcond[2]=((((cj5)*(npy)))+(((-0.300000000000000)*(sj3)*(x134)))+(((npx)*(sj5)))+(((-0.0286100000000000)*(cj3)*(x134)))+(((-0.0285000000000000)*(x134))));
evalcond[3]=((-0.0285000000000000)+(((npz)*(x133)))+(((cj5)*(npy)*(x134)))+(((-0.300000000000000)*(sj3)))+(((npx)*(sj5)*(x134)))+(((-0.0286100000000000)*(cj3))));
evalcond[4]=((0.0196328037000000)+(((0.0570000000000000)*(cj5)*(npy)*(x134)))+(((-0.530560000000000)*(npy)*(sj5)))+(((0.0570000000000000)*(npz)*(x133)))+(((-1.00000000000000)*(pp)))+(((0.0570000000000000)*(npx)*(sj5)*(x134)))+(((0.530560000000000)*(cj5)*(npx))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IKReal x135=(npy)*(npy);
IKReal x136=(npx)*(npx);
IKReal x137=((x135)+(x136));
if( (x137) < (IKReal)-0.00001 )
    continue;
IKReal x138=IKsqrt(x137);
IKReal x139=IKabs(x138);
IKReal x140=((IKabs(x139) != 0)?((IKReal)1/(x139)):(IKReal)1.0e30);
IKReal x141=((0.0286100000000000)*(sj3));
IKReal x142=((0.265280000000000)+(x141));
IKReal x143=((0.300000000000000)*(cj3));
IKReal x144=((x142)+(((-1.00000000000000)*(x143))));
IKReal x145=((x140)*(x144));
if( (x145) < -1-IKFAST_SINCOS_THRESH || (x145) > 1+IKFAST_SINCOS_THRESH )
    continue;
IKReal x146=IKasin(x145);
IKReal x147=((-1.00000000000000)*(npy));
if( IKabs(npx) < IKFAST_ATAN2_MAGTHRESH && IKabs(x147) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x148=IKatan2(npx, x147);
j5array[0]=((((-1.00000000000000)*(x148)))+(x146));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.00000000000000)*(x148)))+(((-1.00000000000000)*(x146))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IKReal evalcond[1];
evalcond[0]=((0.0212573037000000)+(((0.00163077000000000)*(cj3)))+(((-0.530560000000000)*(npy)*(IKsin(j5))))+(((0.0171000000000000)*(sj3)))+(((-1.00000000000000)*(pp)))+(((0.530560000000000)*(npx)*(IKcos(j5)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst48;
gconst48=IKsign(((-0.0285000000000000)+(((-0.300000000000000)*(sj3)))+(((-0.0286100000000000)*(cj3)))));
dummyeval[0]=((-1.00000000000000)+(((-10.5263157894737)*(sj3)))+(((-1.00385964912281)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((-3.14159265358979)+(IKfmod(((0.000366660264346841)+(j3)), 6.28318530717959)));
evalcond[1]=((-0.565290469142600)+(((-1.00000000000000)*(npy)*(sj5)))+(((cj5)*(npx))));
evalcond[2]=((0.0196328037001539)+(((-0.530560000000000)*(npy)*(sj5)))+(((-1.00000000000000)*(pp)))+(((0.530560000000000)*(cj5)*(npx))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((370370370370.370)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((370370370370.370)*(cj5)*(npy)))+(((370370370370.370)*(npx)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((370370370370.370)*(npz)))+IKsqr(((((370370370370.370)*(cj5)*(npy)))+(((370370370370.370)*(npx)*(sj5)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((370370370370.370)*(npz)), ((((370370370370.370)*(cj5)*(npy)))+(((370370370370.370)*(npx)*(sj5)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[5];
IKReal x149=IKsin(j4);
IKReal x150=IKcos(j4);
evalcond[0]=((npz)+(((-2.70000000000000e-12)*(x149))));
evalcond[1]=((((npz)*(x150)))+(((-1.00000000000000)*(npx)*(sj5)*(x149)))+(((-1.00000000000000)*(cj5)*(npy)*(x149))));
evalcond[2]=((((cj5)*(npy)))+(((npx)*(sj5)))+(((-2.70000000000000e-12)*(x150))));
evalcond[3]=((-2.70000000000000e-12)+(((npz)*(x149)))+(((npx)*(sj5)*(x150)))+(((cj5)*(npy)*(x150))));
evalcond[4]=((0.0196328037000000)+(((0.0570000000000000)*(cj5)*(npy)*(x150)))+(((0.0570000000000000)*(npx)*(sj5)*(x150)))+(((-0.530560000000000)*(npy)*(sj5)))+(((0.0570000000000000)*(npz)*(x149)))+(((-1.00000000000000)*(pp)))+(((0.530560000000000)*(cj5)*(npx))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((-2.95180107280163)+(j3)), 6.28318530717959)));
evalcond[1]=((0.0347304708366476)+(((-1.00000000000000)*(npy)*(sj5)))+(((cj5)*(npx))));
evalcond[2]=((0.0196328037447955)+(((-0.530560000000000)*(npy)*(sj5)))+(((-1.00000000000000)*(pp)))+(((0.530560000000000)*(cj5)*(npx))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((1272447958.87319)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1272447958.87319)*(npx)*(sj5)))+(((1272447958.87319)*(cj5)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1272447958.87319)*(npz)))+IKsqr(((((1272447958.87319)*(npx)*(sj5)))+(((1272447958.87319)*(cj5)*(npy)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1272447958.87319)*(npz)), ((((1272447958.87319)*(npx)*(sj5)))+(((1272447958.87319)*(cj5)*(npy)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[5];
IKReal x151=IKsin(j4);
IKReal x152=IKcos(j4);
evalcond[0]=((npz)+(((-7.85886757117790e-10)*(x151))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(npy)*(x151)))+(((-1.00000000000000)*(npx)*(sj5)*(x151)))+(((npz)*(x152))));
evalcond[2]=((((cj5)*(npy)))+(((npx)*(sj5)))+(((-7.85886757117790e-10)*(x152))));
evalcond[3]=((-7.85886757117790e-10)+(((npx)*(sj5)*(x152)))+(((npz)*(x151)))+(((cj5)*(npy)*(x152))));
evalcond[4]=((0.0196328037000000)+(((0.0570000000000000)*(npz)*(x151)))+(((0.0570000000000000)*(npx)*(sj5)*(x152)))+(((-0.530560000000000)*(npy)*(sj5)))+(((0.0570000000000000)*(cj5)*(npy)*(x152)))+(((-1.00000000000000)*(pp)))+(((0.530560000000000)*(cj5)*(npx))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.00000000000000)*(gconst48)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((-1.00000000000000)*(npx)*(sj5)))+(((-1.00000000000000)*(cj5)*(npy))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((-1.00000000000000)*(gconst48)*(npz)), ((gconst48)*(((((-1.00000000000000)*(npx)*(sj5)))+(((-1.00000000000000)*(cj5)*(npy)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[5];
IKReal x153=IKsin(j4);
IKReal x154=IKcos(j4);
evalcond[0]=((((-0.300000000000000)*(sj3)*(x153)))+(((-0.0285000000000000)*(x153)))+(npz)+(((-0.0286100000000000)*(cj3)*(x153))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(npy)*(x153)))+(((-1.00000000000000)*(npx)*(sj5)*(x153)))+(((npz)*(x154))));
evalcond[2]=((((-0.0286100000000000)*(cj3)*(x154)))+(((-0.0285000000000000)*(x154)))+(((cj5)*(npy)))+(((npx)*(sj5)))+(((-0.300000000000000)*(sj3)*(x154))));
evalcond[3]=((-0.0285000000000000)+(((cj5)*(npy)*(x154)))+(((-0.300000000000000)*(sj3)))+(((npx)*(sj5)*(x154)))+(((npz)*(x153)))+(((-0.0286100000000000)*(cj3))));
evalcond[4]=((0.0196328037000000)+(((0.0570000000000000)*(npz)*(x153)))+(((0.0570000000000000)*(npx)*(sj5)*(x154)))+(((-0.530560000000000)*(npy)*(sj5)))+(((-1.00000000000000)*(pp)))+(((0.530560000000000)*(cj5)*(npx)))+(((0.0570000000000000)*(cj5)*(npy)*(x154))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x66=((cj3)*(cj4)*(cj5));
IKReal x67=((sj3)*(sj5));
IKReal x68=((x66)+(((-1.00000000000000)*(x67))));
IKReal x69=((cj5)*(sj3));
IKReal x70=((cj3)*(cj4)*(sj5));
IKReal x71=((x69)+(x70));
IKReal x72=((cj3)*(cj5));
IKReal x73=((cj4)*(x67));
IKReal x74=((x72)+(((-1.00000000000000)*(x73))));
IKReal x75=((cj4)*(x69));
IKReal x76=((cj3)*(sj5));
IKReal x77=((x76)+(x75));
IKReal x78=((-1.00000000000000)*(x77));
new_r00=((((cj5)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(r02)))+(((r00)*(sj4)*(sj5))));
new_r01=((((r10)*(sj4)*(sj5)))+(((cj5)*(r11)*(sj4)))+(((-1.00000000000000)*(cj4)*(r12))));
new_r02=((((-1.00000000000000)*(cj4)*(r22)))+(((cj5)*(r21)*(sj4)))+(((r20)*(sj4)*(sj5))));
new_r10=((((cj3)*(r02)*(sj4)))+(((r01)*(x68)))+(((r00)*(x71))));
new_r11=((((r11)*(x68)))+(((r10)*(x71)))+(((cj3)*(r12)*(sj4))));
new_r12=((((r20)*(x71)))+(((r21)*(x68)))+(((cj3)*(r22)*(sj4))));
new_r20=((((r00)*(x74)))+(((-1.00000000000000)*(r02)*(sj3)*(sj4)))+(((r01)*(x78))));
new_r21=((((-1.00000000000000)*(r12)*(sj3)*(sj4)))+(((r11)*(x78)))+(((r10)*(x74))));
new_r22=((((r21)*(x78)))+(((-1.00000000000000)*(r22)*(sj3)*(sj4)))+(((r20)*(x74))));
{
IKReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-1.00000000000000)*(new_r22));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal dummyeval[1];
IKReal gconst49;
gconst49=IKsign(cj1);
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst50;
gconst50=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[7];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j1)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x79=IKatan2(new_r12, new_r02);
j2array[0]=((-1.00000000000000)*(x79));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.00000000000000)*(x79))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[1];
evalcond[0]=((((new_r02)*(IKcos(j2))))+(((-1.00000000000000)*(new_r12)*(IKsin(j2)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.00000000000000)*(new_r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(new_r00)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(new_r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r11)))))+IKsqr(((((-1.00000000000000)*(new_r00)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r10)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.00000000000000)*(new_r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r11)))), ((((-1.00000000000000)*(new_r00)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r10)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IKReal evalcond[4];
IKReal x80=IKcos(j0);
IKReal x81=IKsin(j0);
evalcond[0]=((((cj2)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj2)))+(x80));
evalcond[1]=((((-1.00000000000000)*(new_r10)*(sj2)))+(((cj2)*(new_r00)))+(((-1.00000000000000)*(x81))));
evalcond[2]=((((cj2)*(new_r10)))+(x80)+(((new_r00)*(sj2))));
evalcond[3]=((((cj2)*(new_r11)))+(((new_r01)*(sj2)))+(x81));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
IKReal x82=((-1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j1)), 6.28318530717959)));
evalcond[1]=x82;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x82;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x83=IKatan2(new_r12, new_r02);
j2array[0]=((-1.00000000000000)*(x83));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.00000000000000)*(x83))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[1];
evalcond[0]=((((new_r02)*(IKcos(j2))))+(((-1.00000000000000)*(new_r12)*(IKsin(j2)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((cj2)*(new_r11)))+(((new_r01)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj2)*(new_r01)))+(((new_r11)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(new_r11)))+(((new_r01)*(sj2)))))+IKsqr(((((-1.00000000000000)*(cj2)*(new_r01)))+(((new_r11)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((cj2)*(new_r11)))+(((new_r01)*(sj2)))), ((((-1.00000000000000)*(cj2)*(new_r01)))+(((new_r11)*(sj2)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IKReal evalcond[4];
IKReal x84=IKcos(j0);
IKReal x85=IKsin(j0);
evalcond[0]=((((cj2)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj2)))+(x84));
evalcond[1]=((((-1.00000000000000)*(new_r10)*(sj2)))+(((cj2)*(new_r00)))+(((-1.00000000000000)*(x85))));
evalcond[2]=((((cj2)*(new_r10)))+(((-1.00000000000000)*(x84)))+(((new_r00)*(sj2))));
evalcond[3]=((((cj2)*(new_r11)))+(((new_r01)*(sj2)))+(((-1.00000000000000)*(x85))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((cj1)*(gconst50)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((cj1)*(gconst50)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((cj1)*(gconst50)*(new_r02)), ((cj1)*(gconst50)*(new_r12)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[6];
IKReal x86=IKcos(j2);
IKReal x87=IKsin(j2);
evalcond[0]=((((-1.00000000000000)*(new_r12)*(x87)))+(((new_r02)*(x86))));
evalcond[1]=((((-1.00000000000000)*(cj1)))+(((new_r12)*(x86)))+(((new_r02)*(x87))));
evalcond[2]=((((cj1)*(new_r00)*(x87)))+(((-1.00000000000000)*(new_r20)*(sj1)))+(((cj1)*(new_r10)*(x86))));
evalcond[3]=((((cj1)*(new_r11)*(x86)))+(((cj1)*(new_r01)*(x87)))+(((-1.00000000000000)*(new_r21)*(sj1))));
evalcond[4]=((-1.00000000000000)+(((cj1)*(new_r02)*(x87)))+(((-1.00000000000000)*(new_r22)*(sj1)))+(((cj1)*(new_r12)*(x86))));
evalcond[5]=((((-1.00000000000000)*(cj1)*(new_r22)))+(((-1.00000000000000)*(new_r12)*(sj1)*(x86)))+(((-1.00000000000000)*(new_r02)*(sj1)*(x87))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst51;
gconst51=IKsign(cj1);
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[11];
IKReal x88=((cj2)*(new_r02));
IKReal x89=((new_r12)*(sj2));
IKReal x90=((((-1.00000000000000)*(x89)))+(x88));
IKReal x91=((new_r02)*(sj2));
IKReal x92=((cj2)*(new_r12));
IKReal x93=((x91)+(x92));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j1)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x90;
evalcond[5]=x90;
evalcond[6]=x93;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x93));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.00000000000000)*(new_r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(new_r00)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(new_r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r11)))))+IKsqr(((((-1.00000000000000)*(new_r00)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r10)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.00000000000000)*(new_r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r11)))), ((((-1.00000000000000)*(new_r00)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r10)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IKReal evalcond[4];
IKReal x94=IKcos(j0);
IKReal x95=IKsin(j0);
evalcond[0]=((((cj2)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj2)))+(x94));
evalcond[1]=((((-1.00000000000000)*(new_r10)*(sj2)))+(((cj2)*(new_r00)))+(((-1.00000000000000)*(x95))));
evalcond[2]=((((cj2)*(new_r10)))+(((new_r00)*(sj2)))+(x94));
evalcond[3]=((((cj2)*(new_r11)))+(((new_r01)*(sj2)))+(x95));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x96=((cj2)*(new_r02));
IKReal x97=((new_r12)*(sj2));
IKReal x98=((((-1.00000000000000)*(x97)))+(x96));
IKReal x99=((-1.00000000000000)+(new_r22));
IKReal x100=((new_r02)*(sj2));
IKReal x101=((cj2)*(new_r12));
IKReal x102=((x100)+(x101));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j1)), 6.28318530717959)));
evalcond[1]=x99;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x98;
evalcond[5]=x98;
evalcond[6]=x102;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x99;
evalcond[10]=x102;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((cj2)*(new_r11)))+(((new_r01)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj2)*(new_r01)))+(((new_r11)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(new_r11)))+(((new_r01)*(sj2)))))+IKsqr(((((-1.00000000000000)*(cj2)*(new_r01)))+(((new_r11)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((cj2)*(new_r11)))+(((new_r01)*(sj2)))), ((((-1.00000000000000)*(cj2)*(new_r01)))+(((new_r11)*(sj2)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IKReal evalcond[4];
IKReal x103=IKcos(j0);
IKReal x104=IKsin(j0);
evalcond[0]=((((cj2)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj2)))+(x103));
evalcond[1]=((((-1.00000000000000)*(new_r10)*(sj2)))+(((cj2)*(new_r00)))+(((-1.00000000000000)*(x104))));
evalcond[2]=((((cj2)*(new_r10)))+(((-1.00000000000000)*(x103)))+(((new_r00)*(sj2))));
evalcond[3]=((((cj2)*(new_r11)))+(((new_r01)*(sj2)))+(((-1.00000000000000)*(x104))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1.00000000000000)*(gconst51)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst51)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((-1.00000000000000)*(gconst51)*(new_r21)), ((-1.00000000000000)*(gconst51)*(new_r20)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IKReal evalcond[8];
IKReal x105=IKcos(j0);
IKReal x106=IKsin(j0);
evalcond[0]=((((cj1)*(x105)))+(new_r20));
evalcond[1]=((new_r21)+(((cj1)*(x106))));
evalcond[2]=((((cj2)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj2)))+(x105));
evalcond[3]=((((-1.00000000000000)*(new_r10)*(sj2)))+(((cj2)*(new_r00)))+(((-1.00000000000000)*(x106))));
evalcond[4]=((((cj2)*(new_r10)))+(((sj1)*(x105)))+(((new_r00)*(sj2))));
evalcond[5]=((((sj1)*(x106)))+(((cj2)*(new_r11)))+(((new_r01)*(sj2))));
evalcond[6]=((((-1.00000000000000)*(cj1)*(new_r20)))+(((-1.00000000000000)*(cj2)*(new_r10)*(sj1)))+(((-1.00000000000000)*(x105)))+(((-1.00000000000000)*(new_r00)*(sj1)*(sj2))));
evalcond[7]=((((-1.00000000000000)*(cj1)*(new_r21)))+(((-1.00000000000000)*(new_r01)*(sj1)*(sj2)))+(((-1.00000000000000)*(x106)))+(((-1.00000000000000)*(cj2)*(new_r11)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1.00000000000000)*(gconst49)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst49)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((-1.00000000000000)*(gconst49)*(new_r21)), ((-1.00000000000000)*(gconst49)*(new_r20)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IKReal evalcond[2];
evalcond[0]=((new_r20)+(((cj1)*(IKcos(j0)))));
evalcond[1]=((new_r21)+(((cj1)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst52;
gconst52=IKsign(((((new_r02)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(new_r12)))));
dummyeval[0]=((((new_r02)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((cj0)*(gconst52)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((cj0)*(gconst52)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((cj0)*(gconst52)*(new_r02)), ((cj0)*(gconst52)*(new_r12)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[12];
IKReal x107=IKcos(j2);
IKReal x108=IKsin(j2);
evalcond[0]=((((new_r02)*(x107)))+(((-1.00000000000000)*(new_r12)*(x108))));
evalcond[1]=((((new_r01)*(x107)))+(cj0)+(((-1.00000000000000)*(new_r11)*(x108))));
evalcond[2]=((((new_r12)*(x107)))+(((new_r02)*(x108)))+(((-1.00000000000000)*(cj1))));
evalcond[3]=((((-1.00000000000000)*(new_r10)*(x108)))+(((new_r00)*(x107)))+(((-1.00000000000000)*(sj0))));
evalcond[4]=((((new_r00)*(x108)))+(((cj0)*(sj1)))+(((new_r10)*(x107))));
evalcond[5]=((((sj0)*(sj1)))+(((new_r01)*(x108)))+(((new_r11)*(x107))));
evalcond[6]=((((cj1)*(new_r10)*(x107)))+(((cj1)*(new_r00)*(x108)))+(((-1.00000000000000)*(new_r20)*(sj1))));
evalcond[7]=((((cj1)*(new_r11)*(x107)))+(((-1.00000000000000)*(new_r21)*(sj1)))+(((cj1)*(new_r01)*(x108))));
evalcond[8]=((-1.00000000000000)+(((cj1)*(new_r02)*(x108)))+(((cj1)*(new_r12)*(x107)))+(((-1.00000000000000)*(new_r22)*(sj1))));
evalcond[9]=((((-1.00000000000000)*(cj1)*(new_r22)))+(((-1.00000000000000)*(new_r12)*(sj1)*(x107)))+(((-1.00000000000000)*(new_r02)*(sj1)*(x108))));
evalcond[10]=((((-1.00000000000000)*(cj1)*(new_r20)))+(((-1.00000000000000)*(cj0)))+(((-1.00000000000000)*(new_r00)*(sj1)*(x108)))+(((-1.00000000000000)*(new_r10)*(sj1)*(x107))));
evalcond[11]=((((-1.00000000000000)*(cj1)*(new_r21)))+(((-1.00000000000000)*(new_r11)*(sj1)*(x107)))+(((-1.00000000000000)*(sj0)))+(((-1.00000000000000)*(new_r01)*(sj1)*(x108))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots8(IKReal rawcoeffs[8+1], IKReal rawroots[8], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    const IKReal tolsqrt = 8*sqrt(std::numeric_limits<IKReal>::epsilon());
    complex<IKReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[8];
    IKReal err[8];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IKReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                if( abs(roots[i]-roots[j]) < tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < sqrt(std::numeric_limits<IKReal>::epsilon()) ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "<robot:genericrobot - hubo_arm (2263a29311e55ee8644c4d7398703d67)>"; }

IKFAST_API const char* getIKFastVersion() { return "54"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
