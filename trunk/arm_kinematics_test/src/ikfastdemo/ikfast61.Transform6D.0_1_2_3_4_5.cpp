/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2012-11-21 23:37:44.306680
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[0]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKcos(j[1]);
x7=IKsin(j[3]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((IkReal(0.0435000000000000))*(x11));
x13=((IkReal(0.265280000000000))*(x3));
x14=((IkReal(0.0435000000000000))*(x10));
x15=((IkReal(0.0285000000000000))*(x3));
x16=((IkReal(0.0435000000000000))*(x7));
x17=((IkReal(0.0286100000000000))*(x3));
x18=((IkReal(1.00000000000000))*(x3));
x19=((IkReal(0.0435000000000000))*(x5));
x20=((x0)*(x1));
x21=((x6)*(x7));
x22=((x1)*(x2));
x23=((x0)*(x4));
x24=((x1)*(x6));
x25=((x2)*(x4));
x26=((x0)*(x6));
x27=((x4)*(x6));
x28=((IkReal(1.00000000000000))*(x22));
x29=((x18)*(x5));
x30=((x2)*(x5)*(x6));
x31=((IkReal(1.00000000000000))*(x30));
x32=((x23)+(((IkReal(-1.00000000000000))*(x18)*(x22))));
x33=((((x3)*(x7)))+(((x24)*(x5))));
x34=((((IkReal(-1.00000000000000))*(x18)*(x23)))+(x28));
x35=((((IkReal(-1.00000000000000))*(x25)))+(((IkReal(-1.00000000000000))*(x18)*(x20))));
x36=((((IkReal(-1.00000000000000))*(x18)*(x25)))+(((IkReal(-1.00000000000000))*(x20))));
x37=((x32)*(x7));
x38=((x11)*(x34));
x39=((x35)*(x7));
x40=((((x2)*(x21)))+(((x32)*(x5))));
x41=((((x10)*(x33)))+(((x11)*(x27))));
x42=((((x0)*(x21)))+(((x35)*(x5))));
x43=((((x10)*(x40)))+(((x11)*(x36))));
x44=((x38)+(((x10)*(x42))));
eerot[0]=((((x44)*(x9)))+(((x8)*(((((IkReal(-1.00000000000000))*(x26)*(x5)))+(x39))))));
eerot[1]=((((x44)*(x8)))+(((x9)*(((((IkReal(1.00000000000000))*(x26)*(x5)))+(((IkReal(-1.00000000000000))*(x39))))))));
eerot[2]=((((x11)*(x42)))+(((x10)*(((((IkReal(-1.00000000000000))*(x28)))+(((x23)*(x3))))))));
IkReal x45=((IkReal(1.00000000000000))*(x20));
eetrans[0]=((((IkReal(-1.00000000000000))*(x17)*(x45)))+(((x9)*(((((x12)*(x34)))+(((x14)*(x42)))))))+(((x8)*(((((x16)*(x35)))+(((IkReal(-1.00000000000000))*(x19)*(x26)))))))+(((IkReal(-0.0286100000000000))*(x25)))+(((x7)*(((((IkReal(-0.265280000000000))*(x25)))+(((IkReal(-1.00000000000000))*(x13)*(x45)))))))+(((IkReal(-0.265280000000000))*(x26)*(x5)))+(((x5)*(((((IkReal(-0.0285000000000000))*(x25)))+(((IkReal(-1.00000000000000))*(x15)*(x45)))))))+(((IkReal(0.300000000000000))*(x26)))+(((IkReal(0.0285000000000000))*(x0)*(x21))));
eerot[3]=((((x43)*(x9)))+(((x8)*(((((IkReal(-1.00000000000000))*(x31)))+(x37))))));
eerot[4]=((((x9)*(((x31)+(((IkReal(-1.00000000000000))*(x37)))))))+(((x43)*(x8))));
eerot[5]=((((x10)*(((((x25)*(x3)))+(x20)))))+(((x11)*(x40))));
IkReal x46=((x2)*(x6));
IkReal x47=((IkReal(1.00000000000000))*(x22));
eetrans[1]=((((x5)*(((((IkReal(-1.00000000000000))*(x15)*(x47)))+(((IkReal(0.0285000000000000))*(x23)))))))+(((x7)*(((((IkReal(0.265280000000000))*(x23)))+(((IkReal(-1.00000000000000))*(x13)*(x47)))))))+(((IkReal(-0.265280000000000))*(x30)))+(((x9)*(((((x14)*(x40)))+(((x12)*(x36)))))))+(((IkReal(0.0286100000000000))*(x23)))+(((IkReal(-1.00000000000000))*(x17)*(x47)))+(((IkReal(0.300000000000000))*(x46)))+(((IkReal(0.0285000000000000))*(x2)*(x21)))+(((x8)*(((((IkReal(-1.00000000000000))*(x19)*(x46)))+(((x16)*(x32))))))));
eerot[6]=((((x41)*(x9)))+(((x8)*(((((IkReal(-1.00000000000000))*(x29)))+(((x1)*(x21))))))));
eerot[7]=((((x41)*(x8)))+(((x9)*(((x29)+(((IkReal(-1.00000000000000))*(x1)*(x21))))))));
eerot[8]=((((x11)*(x33)))+(((IkReal(-1.00000000000000))*(x10)*(x27))));
eetrans[2]=((IkReal(0.0836000000000000))+(((IkReal(0.0285000000000000))*(x24)*(x5)))+(((IkReal(0.0286100000000000))*(x24)))+(((IkReal(0.300000000000000))*(x3)))+(((IkReal(0.265280000000000))*(x1)*(x21)))+(((IkReal(-1.00000000000000))*(x13)*(x5)))+(((x9)*(((((x12)*(x27)))+(((x14)*(x33)))))))+(((x8)*(((((x16)*(x24)))+(((IkReal(-1.00000000000000))*(x19)*(x3)))))))+(((x15)*(x7))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((IkReal(-0.0435000000000000))*(r00)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((py)+(((IkReal(-0.0435000000000000))*(r10))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-0.0836000000000000))+(((IkReal(-0.0435000000000000))*(r20)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
npx=((((py)*(r10)))+(((pz)*(r20)))+(((px)*(r00))));
npy=((((px)*(r01)))+(((pz)*(r21)))+(((py)*(r11))));
npz=((((py)*(r12)))+(((pz)*(r22)))+(((px)*(r02))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((py)*(r00)))+(((IkReal(-1.00000000000000))*(px)*(r10))));
rxp1_0=((((pz)*(r11)))+(((IkReal(-1.00000000000000))*(py)*(r21))));
rxp1_1=((((IkReal(-1.00000000000000))*(pz)*(r01)))+(((px)*(r21))));
rxp1_2=((((py)*(r01)))+(((IkReal(-1.00000000000000))*(px)*(r11))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((py)*(r02)))+(((IkReal(-1.00000000000000))*(px)*(r12))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((IkReal(1.00742502485919))+(((IkReal(-6.21850944999799))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.00742502485919))+(((IkReal(-6.21850944999799))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x48=IKasin(((IkReal(1.00742502485919))+(((IkReal(-6.21850944999799))*(pp)))));
j3array[0]=((IkReal(1.36869404497391))+(((IkReal(-1.00000000000000))*(x48))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(4.51028669856371))+(x48));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((npy)*(npy))+((npx)*(npx)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((((npx)*(npx))*((npy)*(npy))))+((npy)*(npy)*(npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x49=(npy)*(npy);
if( IKabs(((IkReal(-0.530560000000000))*(npx)*(npy))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.530560000000000))*(x49))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x50=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-0.530560000000000))*(npx)*(npy)), ((IkReal(0.530560000000000))*(x49)))));
if( (((((IkReal(0.281493913600000))*(x49)*((npx)*(npx))))+(((IkReal(0.281493913600000))*((x49)*(x49)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((IkReal(0.281493913600000))*(x49)*((npx)*(npx))))+(((IkReal(0.281493913600000))*((x49)*(x49)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.281493913600000))*(x49)*((npx)*(npx))))+(((IkReal(0.281493913600000))*((x49)*(x49))))))))):(IkReal)1.0e30))*(((((npy)*(pp)))+(((IkReal(-0.00163077000000000))*(cj3)*(npy)))+(((IkReal(-0.0212573037000000))*(npy)))+(((IkReal(-0.0171000000000000))*(npy)*(sj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((IkReal(0.281493913600000))*(x49)*((npx)*(npx))))+(((IkReal(0.281493913600000))*((x49)*(x49)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.281493913600000))*(x49)*((npx)*(npx))))+(((IkReal(0.281493913600000))*((x49)*(x49))))))))):(IkReal)1.0e30))*(((((npy)*(pp)))+(((IkReal(-0.00163077000000000))*(cj3)*(npy)))+(((IkReal(-0.0212573037000000))*(npy)))+(((IkReal(-0.0171000000000000))*(npy)*(sj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x51=IKasin(((((IKabs(IKabs(IKsqrt(((((IkReal(0.281493913600000))*(x49)*((npx)*(npx))))+(((IkReal(0.281493913600000))*((x49)*(x49)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.281493913600000))*(x49)*((npx)*(npx))))+(((IkReal(0.281493913600000))*((x49)*(x49))))))))):(IkReal)1.0e30))*(((((npy)*(pp)))+(((IkReal(-0.00163077000000000))*(cj3)*(npy)))+(((IkReal(-0.0212573037000000))*(npy)))+(((IkReal(-0.0171000000000000))*(npy)*(sj3)))))));
j5array[0]=((((IkReal(-1.00000000000000))*(x50)))+(((IkReal(-1.00000000000000))*(x51))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((IkReal(3.14159265358979))+(x51)+(((IkReal(-1.00000000000000))*(x50))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x52=IKsin(j5);
IkReal x53=IKcos(j5);
IkReal x54=((npy)*(x52));
evalcond[0]=((IkReal(-0.265280000000000))+(((IkReal(-1.00000000000000))*(x54)))+(((npx)*(x53)))+(((IkReal(-0.0286100000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3))));
evalcond[1]=((((IkReal(-0.00163077000000000))*(cj3)*(npx)))+(((npx)*(pp)))+(((IkReal(-0.0171000000000000))*(npx)*(sj3)))+(((IkReal(-0.0212573037000000))*(npx)))+(((IkReal(-0.530560000000000))*(x53)*((npx)*(npx))))+(((IkReal(0.530560000000000))*(npx)*(x54))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((IkReal(-0.0285000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-0.0286100000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.00385964912281))*(cj3)))+(((IkReal(-10.5263157894737))*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((IkReal(-0.0285000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-0.0286100000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.00385964912281))*(cj3)))+(((IkReal(-10.5263157894737))*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(0.000366660264346841))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.319553315008452))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(-0.565290469142600))+(((IkReal(-1.00000000000000))*(npy)*(sj5)))+(((cj5)*(npx))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((IkReal(370370370370.370))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(370370370370.370))*(cj5)*(npy)))+(((IkReal(370370370370.370))*(npx)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(370370370370.370))*(npz)))+IKsqr(((((IkReal(370370370370.370))*(cj5)*(npy)))+(((IkReal(370370370370.370))*(npx)*(sj5)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(370370370370.370))*(npz)), ((((IkReal(370370370370.370))*(cj5)*(npy)))+(((IkReal(370370370370.370))*(npx)*(sj5)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x55=IKsin(j4);
IkReal x56=IKcos(j4);
IkReal x57=((npx)*(sj5));
IkReal x58=((cj5)*(npy));
IkReal x59=((IkReal(1.00000000000000))*(x55));
IkReal x60=((IkReal(0.0570000000000000))*(x56));
IkReal x61=((npz)*(x55));
evalcond[0]=((((IkReal(-2.70000000000000e-12))*(x55)))+(npz));
evalcond[1]=((((npz)*(x56)))+(((IkReal(-1.00000000000000))*(x57)*(x59)))+(((IkReal(-1.00000000000000))*(x58)*(x59))));
evalcond[2]=((x58)+(x57)+(((IkReal(-2.70000000000000e-12))*(x56))));
evalcond[3]=((IkReal(-2.70000000000000e-12))+(x61)+(((x56)*(x57)))+(((x56)*(x58))));
evalcond[4]=((IkReal(0.0196328037000000))+(((x58)*(x60)))+(((IkReal(0.530560000000000))*(cj5)*(npx)))+(((IkReal(-1.00000000000000))*(pp)))+(((x57)*(x60)))+(((IkReal(0.0570000000000000))*(x61)))+(((IkReal(-0.530560000000000))*(npy)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(-2.95180107280163))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.00120620513770377))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.0347304708366476))+(((IkReal(-1.00000000000000))*(npy)*(sj5)))+(((cj5)*(npx))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((IkReal(1272447958.87319))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1272447958.87319))*(npx)*(sj5)))+(((IkReal(1272447958.87319))*(cj5)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1272447958.87319))*(npz)))+IKsqr(((((IkReal(1272447958.87319))*(npx)*(sj5)))+(((IkReal(1272447958.87319))*(cj5)*(npy)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(1272447958.87319))*(npz)), ((((IkReal(1272447958.87319))*(npx)*(sj5)))+(((IkReal(1272447958.87319))*(cj5)*(npy)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x248=IKsin(j4);
IkReal x249=IKcos(j4);
IkReal x250=((npx)*(sj5));
IkReal x251=((cj5)*(npy));
IkReal x252=((IkReal(1.00000000000000))*(x248));
IkReal x253=((IkReal(0.0570000000000000))*(x249));
IkReal x254=((npz)*(x248));
evalcond[0]=((npz)+(((IkReal(-7.85886757117790e-10))*(x248))));
evalcond[1]=((((npz)*(x249)))+(((IkReal(-1.00000000000000))*(x251)*(x252)))+(((IkReal(-1.00000000000000))*(x250)*(x252))));
evalcond[2]=((x250)+(x251)+(((IkReal(-7.85886757117790e-10))*(x249))));
evalcond[3]=((IkReal(-7.85886757117790e-10))+(((x249)*(x251)))+(((x249)*(x250)))+(x254));
evalcond[4]=((IkReal(0.0196328037000000))+(((IkReal(0.530560000000000))*(cj5)*(npx)))+(((IkReal(0.0570000000000000))*(x254)))+(((IkReal(-1.00000000000000))*(pp)))+(((x250)*(x253)))+(((IkReal(-0.530560000000000))*(npy)*(sj5)))+(((x251)*(x253))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst1)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(cj5)*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst1)*(npz)), ((gconst1)*(((((IkReal(-1.00000000000000))*(cj5)*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x255=IKsin(j4);
IkReal x256=IKcos(j4);
IkReal x257=((IkReal(0.0286100000000000))*(cj3));
IkReal x258=((npx)*(sj5));
IkReal x259=((IkReal(0.300000000000000))*(sj3));
IkReal x260=((cj5)*(npy));
IkReal x261=((IkReal(1.00000000000000))*(x255));
IkReal x262=((npz)*(x255));
IkReal x263=((IkReal(0.0570000000000000))*(x256));
evalcond[0]=((((IkReal(-1.00000000000000))*(x255)*(x257)))+(npz)+(((IkReal(-1.00000000000000))*(x255)*(x259)))+(((IkReal(-0.0285000000000000))*(x255))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x258)*(x261)))+(((IkReal(-1.00000000000000))*(x260)*(x261)))+(((npz)*(x256))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x256)*(x259)))+(x258)+(((IkReal(-0.0285000000000000))*(x256)))+(((IkReal(-1.00000000000000))*(x256)*(x257)))+(x260));
evalcond[3]=((IkReal(-0.0285000000000000))+(((x256)*(x260)))+(((IkReal(-1.00000000000000))*(x257)))+(((x256)*(x258)))+(((IkReal(-1.00000000000000))*(x259)))+(x262));
evalcond[4]=((IkReal(0.0196328037000000))+(((x258)*(x263)))+(((IkReal(0.530560000000000))*(cj5)*(npx)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0570000000000000))*(x262)))+(((x260)*(x263)))+(((IkReal(-0.530560000000000))*(npy)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst0)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(cj5)*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst0)*(npz)), ((gconst0)*(((((IkReal(-1.00000000000000))*(cj5)*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x264=IKsin(j4);
IkReal x265=IKcos(j4);
IkReal x266=((IkReal(0.0286100000000000))*(cj3));
IkReal x267=((npx)*(sj5));
IkReal x268=((IkReal(0.300000000000000))*(sj3));
IkReal x269=((cj5)*(npy));
IkReal x270=((IkReal(1.00000000000000))*(x264));
IkReal x271=((npz)*(x264));
IkReal x272=((IkReal(0.0570000000000000))*(x265));
evalcond[0]=((npz)+(((IkReal(-0.0285000000000000))*(x264)))+(((IkReal(-1.00000000000000))*(x264)*(x268)))+(((IkReal(-1.00000000000000))*(x264)*(x266))));
evalcond[1]=((((npz)*(x265)))+(((IkReal(-1.00000000000000))*(x269)*(x270)))+(((IkReal(-1.00000000000000))*(x267)*(x270))));
evalcond[2]=((((IkReal(-0.0285000000000000))*(x265)))+(((IkReal(-1.00000000000000))*(x265)*(x268)))+(((IkReal(-1.00000000000000))*(x265)*(x266)))+(x267)+(x269));
evalcond[3]=((IkReal(-0.0285000000000000))+(((IkReal(-1.00000000000000))*(x266)))+(((IkReal(-1.00000000000000))*(x268)))+(x271)+(((x265)*(x267)))+(((x265)*(x269))));
evalcond[4]=((IkReal(0.0196328037000000))+(((IkReal(0.530560000000000))*(cj5)*(npx)))+(((x269)*(x272)))+(((IkReal(0.0570000000000000))*(x271)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.530560000000000))*(npy)*(sj5)))+(((x267)*(x272))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
if( IKabs(npx) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npy))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x273=((IkReal(1.00000000000000))*(IKatan2(npx, ((IkReal(-1.00000000000000))*(npy)))));
if( ((((npy)*(npy))+((npx)*(npx)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((IkReal(-0.265280000000000))+(((IkReal(-0.0286100000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((IkReal(-0.265280000000000))+(((IkReal(-0.0286100000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x274=IKasin(((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((IkReal(-0.265280000000000))+(((IkReal(-0.0286100000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3)))))));
j5array[0]=((((IkReal(-1.00000000000000))*(x274)))+(((IkReal(-1.00000000000000))*(x273))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((IkReal(3.14159265358979))+(x274)+(((IkReal(-1.00000000000000))*(x273))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x275=IKsin(j5);
IkReal x276=IKcos(j5);
IkReal x277=((IkReal(0.00163077000000000))*(cj3));
IkReal x278=((IkReal(0.0171000000000000))*(sj3));
IkReal x279=((npx)*(npy));
IkReal x280=((IkReal(0.530560000000000))*(x276));
IkReal x281=((IkReal(0.530560000000000))*(x275));
evalcond[0]=((((x281)*((npy)*(npy))))+(((npy)*(pp)))+(((IkReal(-1.00000000000000))*(x279)*(x280)))+(((IkReal(-0.0212573037000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x278)))+(((IkReal(-1.00000000000000))*(npy)*(x277))));
evalcond[1]=((((npx)*(pp)))+(((IkReal(-0.0212573037000000))*(npx)))+(((x279)*(x281)))+(((IkReal(-1.00000000000000))*(npx)*(x278)))+(((IkReal(-1.00000000000000))*(x280)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(npx)*(x277))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((IkReal(-0.0285000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-0.0286100000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.00385964912281))*(cj3)))+(((IkReal(-10.5263157894737))*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((IkReal(-0.0285000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-0.0286100000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.00385964912281))*(cj3)))+(((IkReal(-10.5263157894737))*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(0.000366660264346841))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.319553315008452))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(-0.565290469142600))+(((IkReal(-1.00000000000000))*(npy)*(sj5)))+(((cj5)*(npx))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((IkReal(370370370370.370))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(370370370370.370))*(cj5)*(npy)))+(((IkReal(370370370370.370))*(npx)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(370370370370.370))*(npz)))+IKsqr(((((IkReal(370370370370.370))*(cj5)*(npy)))+(((IkReal(370370370370.370))*(npx)*(sj5)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(370370370370.370))*(npz)), ((((IkReal(370370370370.370))*(cj5)*(npy)))+(((IkReal(370370370370.370))*(npx)*(sj5)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x282=IKsin(j4);
IkReal x283=IKcos(j4);
IkReal x284=((npx)*(sj5));
IkReal x285=((cj5)*(npy));
IkReal x286=((IkReal(1.00000000000000))*(x282));
IkReal x287=((IkReal(0.0570000000000000))*(x283));
IkReal x288=((npz)*(x282));
evalcond[0]=((((IkReal(-2.70000000000000e-12))*(x282)))+(npz));
evalcond[1]=((((IkReal(-1.00000000000000))*(x284)*(x286)))+(((IkReal(-1.00000000000000))*(x285)*(x286)))+(((npz)*(x283))));
evalcond[2]=((x285)+(x284)+(((IkReal(-2.70000000000000e-12))*(x283))));
evalcond[3]=((IkReal(-2.70000000000000e-12))+(((x283)*(x284)))+(x288)+(((x283)*(x285))));
evalcond[4]=((IkReal(0.0196328037000000))+(((x285)*(x287)))+(((IkReal(0.530560000000000))*(cj5)*(npx)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0570000000000000))*(x288)))+(((IkReal(-0.530560000000000))*(npy)*(sj5)))+(((x284)*(x287))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(-2.95180107280163))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.00120620513770377))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.0347304708366476))+(((IkReal(-1.00000000000000))*(npy)*(sj5)))+(((cj5)*(npx))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((IkReal(1272447958.87319))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1272447958.87319))*(npx)*(sj5)))+(((IkReal(1272447958.87319))*(cj5)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1272447958.87319))*(npz)))+IKsqr(((((IkReal(1272447958.87319))*(npx)*(sj5)))+(((IkReal(1272447958.87319))*(cj5)*(npy)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(1272447958.87319))*(npz)), ((((IkReal(1272447958.87319))*(npx)*(sj5)))+(((IkReal(1272447958.87319))*(cj5)*(npy)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x289=IKsin(j4);
IkReal x290=IKcos(j4);
IkReal x291=((npx)*(sj5));
IkReal x292=((cj5)*(npy));
IkReal x293=((IkReal(1.00000000000000))*(x289));
IkReal x294=((IkReal(0.0570000000000000))*(x290));
IkReal x295=((npz)*(x289));
evalcond[0]=((npz)+(((IkReal(-7.85886757117790e-10))*(x289))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x291)*(x293)))+(((npz)*(x290)))+(((IkReal(-1.00000000000000))*(x292)*(x293))));
evalcond[2]=((((IkReal(-7.85886757117790e-10))*(x290)))+(x291)+(x292));
evalcond[3]=((IkReal(-7.85886757117790e-10))+(((x290)*(x292)))+(x295)+(((x290)*(x291))));
evalcond[4]=((IkReal(0.0196328037000000))+(((IkReal(0.530560000000000))*(cj5)*(npx)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0570000000000000))*(x295)))+(((IkReal(-0.530560000000000))*(npy)*(sj5)))+(((x292)*(x294)))+(((x291)*(x294))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst1)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(cj5)*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst1)*(npz)), ((gconst1)*(((((IkReal(-1.00000000000000))*(cj5)*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x296=IKsin(j4);
IkReal x297=IKcos(j4);
IkReal x298=((IkReal(0.0286100000000000))*(cj3));
IkReal x299=((npx)*(sj5));
IkReal x300=((IkReal(0.300000000000000))*(sj3));
IkReal x301=((cj5)*(npy));
IkReal x302=((IkReal(1.00000000000000))*(x296));
IkReal x303=((npz)*(x296));
IkReal x304=((IkReal(0.0570000000000000))*(x297));
evalcond[0]=((((IkReal(-1.00000000000000))*(x296)*(x298)))+(((IkReal(-0.0285000000000000))*(x296)))+(((IkReal(-1.00000000000000))*(x296)*(x300)))+(npz));
evalcond[1]=((((npz)*(x297)))+(((IkReal(-1.00000000000000))*(x301)*(x302)))+(((IkReal(-1.00000000000000))*(x299)*(x302))));
evalcond[2]=((x301)+(((IkReal(-1.00000000000000))*(x297)*(x300)))+(x299)+(((IkReal(-1.00000000000000))*(x297)*(x298)))+(((IkReal(-0.0285000000000000))*(x297))));
evalcond[3]=((IkReal(-0.0285000000000000))+(((x297)*(x299)))+(x303)+(((x297)*(x301)))+(((IkReal(-1.00000000000000))*(x298)))+(((IkReal(-1.00000000000000))*(x300))));
evalcond[4]=((IkReal(0.0196328037000000))+(((IkReal(0.0570000000000000))*(x303)))+(((IkReal(0.530560000000000))*(cj5)*(npx)))+(((IkReal(-1.00000000000000))*(pp)))+(((x299)*(x304)))+(((IkReal(-0.530560000000000))*(npy)*(sj5)))+(((x301)*(x304))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst0)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(cj5)*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst0)*(npz)), ((gconst0)*(((((IkReal(-1.00000000000000))*(cj5)*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x305=IKsin(j4);
IkReal x306=IKcos(j4);
IkReal x307=((IkReal(0.0286100000000000))*(cj3));
IkReal x308=((npx)*(sj5));
IkReal x309=((IkReal(0.300000000000000))*(sj3));
IkReal x310=((cj5)*(npy));
IkReal x311=((IkReal(1.00000000000000))*(x305));
IkReal x312=((npz)*(x305));
IkReal x313=((IkReal(0.0570000000000000))*(x306));
evalcond[0]=((((IkReal(-1.00000000000000))*(x305)*(x307)))+(((IkReal(-1.00000000000000))*(x305)*(x309)))+(npz)+(((IkReal(-0.0285000000000000))*(x305))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x310)*(x311)))+(((npz)*(x306)))+(((IkReal(-1.00000000000000))*(x308)*(x311))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x306)*(x307)))+(x308)+(x310)+(((IkReal(-1.00000000000000))*(x306)*(x309)))+(((IkReal(-0.0285000000000000))*(x306))));
evalcond[3]=((IkReal(-0.0285000000000000))+(((x306)*(x310)))+(((IkReal(-1.00000000000000))*(x307)))+(x312)+(((IkReal(-1.00000000000000))*(x309)))+(((x306)*(x308))));
evalcond[4]=((IkReal(0.0196328037000000))+(((x308)*(x313)))+(((IkReal(0.530560000000000))*(cj5)*(npx)))+(((x310)*(x313)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0570000000000000))*(x312)))+(((IkReal(-0.530560000000000))*(npy)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
if( IKabs(npx) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npy))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x314=((IkReal(1.00000000000000))*(IKatan2(npx, ((IkReal(-1.00000000000000))*(npy)))));
if( ((((npy)*(npy))+((npx)*(npx)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((IkReal(-0.265280000000000))+(((IkReal(-0.0286100000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((IkReal(-0.265280000000000))+(((IkReal(-0.0286100000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x315=IKasin(((((IKabs(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npy)*(npy))+((npx)*(npx))))))):(IkReal)1.0e30))*(((IkReal(-0.265280000000000))+(((IkReal(-0.0286100000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3)))))));
j5array[0]=((((IkReal(-1.00000000000000))*(x315)))+(((IkReal(-1.00000000000000))*(x314))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x314)))+(x315));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((IkReal(-0.0285000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-0.0286100000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.00385964912281))*(cj3)))+(((IkReal(-10.5263157894737))*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((IkReal(-0.0285000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-0.0286100000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.00385964912281))*(cj3)))+(((IkReal(-10.5263157894737))*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(0.000366660264346841))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.319553315008452))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(-0.565290469142600))+(((IkReal(-1.00000000000000))*(npy)*(sj5)))+(((cj5)*(npx))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((IkReal(370370370370.370))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(370370370370.370))*(cj5)*(npy)))+(((IkReal(370370370370.370))*(npx)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(370370370370.370))*(npz)))+IKsqr(((((IkReal(370370370370.370))*(cj5)*(npy)))+(((IkReal(370370370370.370))*(npx)*(sj5)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(370370370370.370))*(npz)), ((((IkReal(370370370370.370))*(cj5)*(npy)))+(((IkReal(370370370370.370))*(npx)*(sj5)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x316=IKsin(j4);
IkReal x317=IKcos(j4);
IkReal x318=((npx)*(sj5));
IkReal x319=((cj5)*(npy));
IkReal x320=((IkReal(1.00000000000000))*(x316));
IkReal x321=((IkReal(0.0570000000000000))*(x317));
IkReal x322=((npz)*(x316));
evalcond[0]=((npz)+(((IkReal(-2.70000000000000e-12))*(x316))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x319)*(x320)))+(((IkReal(-1.00000000000000))*(x318)*(x320)))+(((npz)*(x317))));
evalcond[2]=((x319)+(x318)+(((IkReal(-2.70000000000000e-12))*(x317))));
evalcond[3]=((IkReal(-2.70000000000000e-12))+(((x317)*(x318)))+(x322)+(((x317)*(x319))));
evalcond[4]=((IkReal(0.0196328037000000))+(((IkReal(0.530560000000000))*(cj5)*(npx)))+(((IkReal(-1.00000000000000))*(pp)))+(((x319)*(x321)))+(((IkReal(-0.530560000000000))*(npy)*(sj5)))+(((x318)*(x321)))+(((IkReal(0.0570000000000000))*(x322))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(-2.95180107280163))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.00120620513770377))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.0347304708366476))+(((IkReal(-1.00000000000000))*(npy)*(sj5)))+(((cj5)*(npx))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((IkReal(1272447958.87319))*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1272447958.87319))*(npx)*(sj5)))+(((IkReal(1272447958.87319))*(cj5)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1272447958.87319))*(npz)))+IKsqr(((((IkReal(1272447958.87319))*(npx)*(sj5)))+(((IkReal(1272447958.87319))*(cj5)*(npy)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(1272447958.87319))*(npz)), ((((IkReal(1272447958.87319))*(npx)*(sj5)))+(((IkReal(1272447958.87319))*(cj5)*(npy)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x323=IKsin(j4);
IkReal x324=IKcos(j4);
IkReal x325=((npx)*(sj5));
IkReal x326=((cj5)*(npy));
IkReal x327=((IkReal(1.00000000000000))*(x323));
IkReal x328=((IkReal(0.0570000000000000))*(x324));
IkReal x329=((npz)*(x323));
evalcond[0]=((((IkReal(-7.85886757117790e-10))*(x323)))+(npz));
evalcond[1]=((((IkReal(-1.00000000000000))*(x326)*(x327)))+(((npz)*(x324)))+(((IkReal(-1.00000000000000))*(x325)*(x327))));
evalcond[2]=((((IkReal(-7.85886757117790e-10))*(x324)))+(x325)+(x326));
evalcond[3]=((IkReal(-7.85886757117790e-10))+(((x324)*(x325)))+(x329)+(((x324)*(x326))));
evalcond[4]=((IkReal(0.0196328037000000))+(((x326)*(x328)))+(((IkReal(0.0570000000000000))*(x329)))+(((IkReal(0.530560000000000))*(cj5)*(npx)))+(((x325)*(x328)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.530560000000000))*(npy)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst1)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(cj5)*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst1)*(npz)), ((gconst1)*(((((IkReal(-1.00000000000000))*(cj5)*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x330=IKsin(j4);
IkReal x331=IKcos(j4);
IkReal x332=((IkReal(0.0286100000000000))*(cj3));
IkReal x333=((npx)*(sj5));
IkReal x334=((IkReal(0.300000000000000))*(sj3));
IkReal x335=((cj5)*(npy));
IkReal x336=((IkReal(1.00000000000000))*(x330));
IkReal x337=((npz)*(x330));
IkReal x338=((IkReal(0.0570000000000000))*(x331));
evalcond[0]=((((IkReal(-1.00000000000000))*(x330)*(x332)))+(npz)+(((IkReal(-1.00000000000000))*(x330)*(x334)))+(((IkReal(-0.0285000000000000))*(x330))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x333)*(x336)))+(((IkReal(-1.00000000000000))*(x335)*(x336)))+(((npz)*(x331))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x331)*(x332)))+(x333)+(x335)+(((IkReal(-1.00000000000000))*(x331)*(x334)))+(((IkReal(-0.0285000000000000))*(x331))));
evalcond[3]=((IkReal(-0.0285000000000000))+(((IkReal(-1.00000000000000))*(x334)))+(((x331)*(x335)))+(((x331)*(x333)))+(x337)+(((IkReal(-1.00000000000000))*(x332))));
evalcond[4]=((IkReal(0.0196328037000000))+(((x333)*(x338)))+(((IkReal(0.530560000000000))*(cj5)*(npx)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0570000000000000))*(x337)))+(((IkReal(-0.530560000000000))*(npy)*(sj5)))+(((x335)*(x338))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst0)*(npz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(cj5)*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst0)*(npz)), ((gconst0)*(((((IkReal(-1.00000000000000))*(cj5)*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x339=IKsin(j4);
IkReal x340=IKcos(j4);
IkReal x341=((IkReal(0.0286100000000000))*(cj3));
IkReal x342=((npx)*(sj5));
IkReal x343=((IkReal(0.300000000000000))*(sj3));
IkReal x344=((cj5)*(npy));
IkReal x345=((IkReal(1.00000000000000))*(x339));
IkReal x346=((npz)*(x339));
IkReal x347=((IkReal(0.0570000000000000))*(x340));
evalcond[0]=((((IkReal(-1.00000000000000))*(x339)*(x341)))+(npz)+(((IkReal(-1.00000000000000))*(x339)*(x343)))+(((IkReal(-0.0285000000000000))*(x339))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x342)*(x345)))+(((IkReal(-1.00000000000000))*(x344)*(x345)))+(((npz)*(x340))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x340)*(x343)))+(x342)+(x344)+(((IkReal(-0.0285000000000000))*(x340)))+(((IkReal(-1.00000000000000))*(x340)*(x341))));
evalcond[3]=((IkReal(-0.0285000000000000))+(((x340)*(x342)))+(((x340)*(x344)))+(((IkReal(-1.00000000000000))*(x343)))+(x346)+(((IkReal(-1.00000000000000))*(x341))));
evalcond[4]=((IkReal(0.0196328037000000))+(((x344)*(x347)))+(((IkReal(0.530560000000000))*(cj5)*(npx)))+(((IkReal(0.0570000000000000))*(x346)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.530560000000000))*(npy)*(sj5)))+(((x342)*(x347))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x62=((r02)*(sj4));
IkReal x63=((IkReal(1.00000000000000))*(sj3));
IkReal x64=((cj3)*(sj5));
IkReal x65=((cj5)*(sj4));
IkReal x66=((r22)*(sj4));
IkReal x67=((r12)*(sj4));
IkReal x68=((cj3)*(cj5));
IkReal x69=((sj4)*(sj5));
IkReal x70=((IkReal(1.00000000000000))*(cj4));
IkReal x71=((((cj4)*(x64)))+(((cj5)*(sj3))));
IkReal x72=((((IkReal(-1.00000000000000))*(sj5)*(x63)))+(((cj4)*(x68))));
IkReal x73=((x68)+(((IkReal(-1.00000000000000))*(cj4)*(sj5)*(x63))));
IkReal x74=((((IkReal(-1.00000000000000))*(x64)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(x63))));
new_r00=((((r00)*(x69)))+(((r01)*(x65)))+(((IkReal(-1.00000000000000))*(r02)*(x70))));
new_r01=((((r10)*(x69)))+(((IkReal(-1.00000000000000))*(r12)*(x70)))+(((r11)*(x65))));
new_r02=((((r21)*(x65)))+(((IkReal(-1.00000000000000))*(r22)*(x70)))+(((r20)*(x69))));
new_r10=((((cj3)*(x62)))+(((r01)*(x72)))+(((r00)*(x71))));
new_r11=((((cj3)*(x67)))+(((r10)*(x71)))+(((r11)*(x72))));
new_r12=((((r20)*(x71)))+(((r21)*(x72)))+(((cj3)*(x66))));
new_r20=((((r00)*(x73)))+(((IkReal(-1.00000000000000))*(x62)*(x63)))+(((r01)*(x74))));
new_r21=((((r10)*(x73)))+(((r11)*(x74)))+(((IkReal(-1.00000000000000))*(x63)*(x67))));
new_r22=((((r21)*(x74)))+(((IkReal(-1.00000000000000))*(x63)*(x66)))+(((r20)*(x73))));
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((IkReal(-1.00000000000000))*(new_r22));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(cj1);
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((cj1)*(new_r00)*(new_r02)))+(((cj1)*(new_r10)*(new_r12)))));
dummyeval[0]=((((cj1)*(new_r00)*(new_r02)))+(((cj1)*(new_r10)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x75=IKatan2(new_r12, new_r02);
j2array[0]=((IkReal(-1.00000000000000))*(x75));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x75))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j2))))+(((new_r02)*(IKcos(j2)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x76=((IkReal(1.00000000000000))*(cj2));
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(x76)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(x76)))+(((new_r11)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(x76)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(x76)))+(((new_r11)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(x76)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2)))), ((((IkReal(-1.00000000000000))*(new_r01)*(x76)))+(((new_r11)*(sj2)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x77=IKcos(j0);
IkReal x78=IKsin(j0);
IkReal x79=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((cj2)*(new_r01)))+(x77)+(((IkReal(-1.00000000000000))*(new_r11)*(x79))));
evalcond[1]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(x78)))+(((IkReal(-1.00000000000000))*(new_r10)*(x79))));
evalcond[2]=((((cj2)*(new_r10)))+(x77)+(((new_r00)*(sj2))));
evalcond[3]=((((cj2)*(new_r11)))+(((new_r01)*(sj2)))+(x78));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x80=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x80;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x80;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x81=IKatan2(new_r12, new_r02);
j2array[0]=((IkReal(-1.00000000000000))*(x81));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x81))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j2))))+(((new_r02)*(IKcos(j2)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((cj2)*(new_r11)))+(((new_r01)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r01)))+(((new_r11)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(new_r11)))+(((new_r01)*(sj2)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r01)))+(((new_r11)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((cj2)*(new_r11)))+(((new_r01)*(sj2)))), ((((IkReal(-1.00000000000000))*(cj2)*(new_r01)))+(((new_r11)*(sj2)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x82=IKcos(j0);
IkReal x83=((IkReal(1.00000000000000))*(sj2));
IkReal x84=((IkReal(1.00000000000000))*(IKsin(j0)));
evalcond[0]=((((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x83)))+(x82));
evalcond[1]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x83)))+(((IkReal(-1.00000000000000))*(x84))));
evalcond[2]=((((cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(x82)))+(((new_r00)*(sj2))));
evalcond[3]=((((cj2)*(new_r11)))+(((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x84))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x85=((gconst4)*(new_r20)*(sj1));
if( IKabs(((new_r02)*(x85))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x85))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r02)*(x85)), ((new_r12)*(x85)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x86=IKcos(j2);
IkReal x87=IKsin(j2);
IkReal x88=((IkReal(1.00000000000000))*(sj1));
IkReal x89=((IkReal(1.00000000000000))*(cj1));
IkReal x90=((new_r12)*(x86));
IkReal x91=((cj1)*(x87));
IkReal x92=((cj1)*(x86));
IkReal x93=((new_r02)*(x87));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x87)))+(((new_r02)*(x86))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x89)))+(x90)+(x93));
evalcond[2]=((((new_r10)*(x92)))+(((IkReal(-1.00000000000000))*(new_r20)*(x88)))+(((new_r00)*(x91))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r21)*(x88)))+(((new_r01)*(x91)))+(((new_r11)*(x92))));
evalcond[4]=((IkReal(-1.00000000000000))+(((cj1)*(x90)))+(((new_r02)*(x91)))+(((IkReal(-1.00000000000000))*(new_r22)*(x88))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x88)*(x93)))+(((IkReal(-1.00000000000000))*(x88)*(x90)))+(((IkReal(-1.00000000000000))*(new_r22)*(x89))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(cj1);
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj1;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x94=((((cj2)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj2))));
IkReal x95=((((cj2)*(new_r10)))+(((new_r00)*(sj2))));
IkReal x96=((((cj2)*(new_r11)))+(((new_r01)*(sj2))));
IkReal x97=((IkReal(-1.00000000000000))+(((new_r02)*(sj2)))+(((cj2)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x94;
evalcond[3]=x94;
evalcond[4]=x97;
evalcond[5]=x95;
evalcond[6]=x96;
evalcond[7]=x95;
evalcond[8]=x96;
evalcond[9]=x97;
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), ((IkReal(-1.00000000000000))*(new_r20)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x98=IKcos(j0);
IkReal x99=IKsin(j0);
IkReal x100=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((new_r20)+(x98));
evalcond[1]=((new_r21)+(x99));
evalcond[2]=((((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x100)))+(x98));
evalcond[3]=((((IkReal(-1.00000000000000))*(x99)))+(((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x100))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x101=((IkReal(1.00000000000000))*(sj2));
IkReal x102=((cj2)*(new_r10));
IkReal x103=((cj2)*(new_r12));
IkReal x104=((cj2)*(new_r11));
IkReal x105=((((IkReal(-1.00000000000000))*(new_r12)*(x101)))+(((cj2)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x105;
evalcond[3]=x105;
evalcond[4]=((IkReal(1.00000000000000))+(((new_r02)*(sj2)))+(x103));
evalcond[5]=((x102)+(((new_r00)*(sj2))));
evalcond[6]=((((new_r01)*(sj2)))+(x104));
evalcond[7]=((((IkReal(-1.00000000000000))*(x102)))+(((IkReal(-1.00000000000000))*(new_r00)*(x101))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x104)))+(((IkReal(-1.00000000000000))*(new_r01)*(x101))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x103)))+(((IkReal(-1.00000000000000))*(new_r02)*(x101))));
evalcond[10]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r21, new_r20);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x106=IKcos(j0);
IkReal x107=((IkReal(1.00000000000000))*(sj2));
IkReal x108=((IkReal(1.00000000000000))*(IKsin(j0)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x106)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x108))));
evalcond[2]=((((cj2)*(new_r01)))+(x106)+(((IkReal(-1.00000000000000))*(new_r11)*(x107))));
evalcond[3]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(x108)))+(((IkReal(-1.00000000000000))*(new_r10)*(x107))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x109=((IkReal(1.00000000000000))*(new_r12));
IkReal x110=((new_r02)*(sj2));
IkReal x111=((((IkReal(-1.00000000000000))*(sj2)*(x109)))+(((cj2)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x111;
evalcond[5]=x111;
evalcond[6]=((x110)+(((cj2)*(new_r12))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj2)*(x109)))+(((IkReal(-1.00000000000000))*(x110))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x112=((IkReal(1.00000000000000))*(cj2));
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(x112)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r11)*(sj2)))+(((IkReal(-1.00000000000000))*(new_r01)*(x112))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(x112)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2)))))+IKsqr(((((new_r11)*(sj2)))+(((IkReal(-1.00000000000000))*(new_r01)*(x112)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(x112)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2)))), ((((new_r11)*(sj2)))+(((IkReal(-1.00000000000000))*(new_r01)*(x112)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x113=IKcos(j0);
IkReal x114=IKsin(j0);
IkReal x115=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x115)))+(x113));
evalcond[1]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(x114)))+(((IkReal(-1.00000000000000))*(new_r10)*(x115))));
evalcond[2]=((((cj2)*(new_r10)))+(x113)+(((new_r00)*(sj2))));
evalcond[3]=((((cj2)*(new_r11)))+(((new_r01)*(sj2)))+(x114));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x116=((IkReal(-1.00000000000000))+(new_r22));
IkReal x117=((((cj2)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj2))));
IkReal x118=((((new_r02)*(sj2)))+(((cj2)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x116;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x117;
evalcond[5]=x117;
evalcond[6]=x118;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x116;
evalcond[10]=x118;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((cj2)*(new_r11)))+(((new_r01)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r01)))+(((new_r11)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(new_r11)))+(((new_r01)*(sj2)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r01)))+(((new_r11)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((cj2)*(new_r11)))+(((new_r01)*(sj2)))), ((((IkReal(-1.00000000000000))*(cj2)*(new_r01)))+(((new_r11)*(sj2)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x119=IKcos(j0);
IkReal x120=((IkReal(1.00000000000000))*(sj2));
IkReal x121=((IkReal(1.00000000000000))*(IKsin(j0)));
evalcond[0]=((((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x120)))+(x119));
evalcond[1]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x120)))+(((IkReal(-1.00000000000000))*(x121))));
evalcond[2]=((((cj2)*(new_r10)))+(((new_r00)*(sj2)))+(((IkReal(-1.00000000000000))*(x119))));
evalcond[3]=((((cj2)*(new_r11)))+(((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x121))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2)))))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x122=IKcos(j0);
IkReal x123=IKsin(j0);
IkReal x124=((IkReal(1.00000000000000))*(cj1));
IkReal x125=((new_r01)*(sj2));
IkReal x126=((IkReal(1.00000000000000))*(sj1));
IkReal x127=((cj2)*(new_r10));
IkReal x128=((new_r00)*(sj2));
IkReal x129=((cj2)*(new_r11));
IkReal x130=((IkReal(1.00000000000000))*(sj2));
IkReal x131=((IkReal(1.00000000000000))*(x123));
evalcond[0]=((new_r20)+(((cj1)*(x122))));
evalcond[1]=((((cj1)*(x123)))+(new_r21));
evalcond[2]=((((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x130)))+(x122));
evalcond[3]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(x131)))+(((IkReal(-1.00000000000000))*(new_r10)*(x130))));
evalcond[4]=((((sj1)*(x122)))+(x127)+(x128));
evalcond[5]=((((sj1)*(x123)))+(x125)+(x129));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x124)))+(((IkReal(-1.00000000000000))*(x126)*(x127)))+(((IkReal(-1.00000000000000))*(x122)))+(((IkReal(-1.00000000000000))*(x126)*(x128))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x126)*(x129)))+(((IkReal(-1.00000000000000))*(x131)))+(((IkReal(-1.00000000000000))*(new_r21)*(x124)))+(((IkReal(-1.00000000000000))*(x125)*(x126))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r01)))+(((new_r11)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r01)))+(((new_r11)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(cj2)*(new_r01)))+(((new_r11)*(sj2)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x132=IKcos(j0);
IkReal x133=IKsin(j0);
IkReal x134=((IkReal(1.00000000000000))*(cj1));
IkReal x135=((new_r01)*(sj2));
IkReal x136=((IkReal(1.00000000000000))*(sj1));
IkReal x137=((cj2)*(new_r10));
IkReal x138=((new_r00)*(sj2));
IkReal x139=((cj2)*(new_r11));
IkReal x140=((IkReal(1.00000000000000))*(sj2));
IkReal x141=((IkReal(1.00000000000000))*(x133));
evalcond[0]=((((cj1)*(x132)))+(new_r20));
evalcond[1]=((new_r21)+(((cj1)*(x133))));
evalcond[2]=((((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x140)))+(x132));
evalcond[3]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(x141)))+(((IkReal(-1.00000000000000))*(new_r10)*(x140))));
evalcond[4]=((((sj1)*(x132)))+(x137)+(x138));
evalcond[5]=((((sj1)*(x133)))+(x135)+(x139));
evalcond[6]=((((IkReal(-1.00000000000000))*(x132)))+(((IkReal(-1.00000000000000))*(x136)*(x137)))+(((IkReal(-1.00000000000000))*(new_r20)*(x134)))+(((IkReal(-1.00000000000000))*(x136)*(x138))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x141)))+(((IkReal(-1.00000000000000))*(x135)*(x136)))+(((IkReal(-1.00000000000000))*(new_r21)*(x134)))+(((IkReal(-1.00000000000000))*(x136)*(x139))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x142=((IkReal(-1.00000000000000))*(gconst5));
if( IKabs(((new_r21)*(x142))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(x142))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r21)*(x142)), ((new_r20)*(x142)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x143=IKcos(j0);
IkReal x144=IKsin(j0);
IkReal x145=((IkReal(1.00000000000000))*(cj1));
IkReal x146=((new_r01)*(sj2));
IkReal x147=((IkReal(1.00000000000000))*(sj1));
IkReal x148=((cj2)*(new_r10));
IkReal x149=((new_r00)*(sj2));
IkReal x150=((cj2)*(new_r11));
IkReal x151=((IkReal(1.00000000000000))*(sj2));
IkReal x152=((IkReal(1.00000000000000))*(x144));
evalcond[0]=((new_r20)+(((cj1)*(x143))));
evalcond[1]=((((cj1)*(x144)))+(new_r21));
evalcond[2]=((((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x151)))+(x143));
evalcond[3]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x151)))+(((IkReal(-1.00000000000000))*(x152))));
evalcond[4]=((((sj1)*(x143)))+(x148)+(x149));
evalcond[5]=((((sj1)*(x144)))+(x150)+(x146));
evalcond[6]=((((IkReal(-1.00000000000000))*(x147)*(x149)))+(((IkReal(-1.00000000000000))*(new_r20)*(x145)))+(((IkReal(-1.00000000000000))*(x143)))+(((IkReal(-1.00000000000000))*(x147)*(x148))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x147)*(x150)))+(((IkReal(-1.00000000000000))*(new_r21)*(x145)))+(((IkReal(-1.00000000000000))*(x152)))+(((IkReal(-1.00000000000000))*(x146)*(x147))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x153=((cj1)*(gconst3));
if( IKabs(((new_r02)*(x153))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x153))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r02)*(x153)), ((new_r12)*(x153)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x154=IKcos(j2);
IkReal x155=IKsin(j2);
IkReal x156=((IkReal(1.00000000000000))*(sj1));
IkReal x157=((IkReal(1.00000000000000))*(cj1));
IkReal x158=((new_r12)*(x154));
IkReal x159=((cj1)*(x155));
IkReal x160=((cj1)*(x154));
IkReal x161=((new_r02)*(x155));
evalcond[0]=((((new_r02)*(x154)))+(((IkReal(-1.00000000000000))*(new_r12)*(x155))));
evalcond[1]=((x158)+(((IkReal(-1.00000000000000))*(x157)))+(x161));
evalcond[2]=((((new_r10)*(x160)))+(((IkReal(-1.00000000000000))*(new_r20)*(x156)))+(((new_r00)*(x159))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r21)*(x156)))+(((new_r01)*(x159)))+(((new_r11)*(x160))));
evalcond[4]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x156)))+(((cj1)*(x158)))+(((new_r02)*(x159))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x156)*(x158)))+(((IkReal(-1.00000000000000))*(x156)*(x161)))+(((IkReal(-1.00000000000000))*(new_r22)*(x157))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(cj1);
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj1;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x162=((((cj2)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj2))));
IkReal x163=((((cj2)*(new_r10)))+(((new_r00)*(sj2))));
IkReal x164=((((cj2)*(new_r11)))+(((new_r01)*(sj2))));
IkReal x165=((IkReal(-1.00000000000000))+(((new_r02)*(sj2)))+(((cj2)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x162;
evalcond[3]=x162;
evalcond[4]=x165;
evalcond[5]=x163;
evalcond[6]=x164;
evalcond[7]=x163;
evalcond[8]=x164;
evalcond[9]=x165;
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), ((IkReal(-1.00000000000000))*(new_r20)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x166=IKcos(j0);
IkReal x167=IKsin(j0);
IkReal x168=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((new_r20)+(x166));
evalcond[1]=((new_r21)+(x167));
evalcond[2]=((((cj2)*(new_r01)))+(x166)+(((IkReal(-1.00000000000000))*(new_r11)*(x168))));
evalcond[3]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(x167)))+(((IkReal(-1.00000000000000))*(new_r10)*(x168))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x169=((IkReal(1.00000000000000))*(sj2));
IkReal x170=((cj2)*(new_r10));
IkReal x171=((cj2)*(new_r12));
IkReal x172=((cj2)*(new_r11));
IkReal x173=((((IkReal(-1.00000000000000))*(new_r12)*(x169)))+(((cj2)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x173;
evalcond[3]=x173;
evalcond[4]=((IkReal(1.00000000000000))+(x171)+(((new_r02)*(sj2))));
evalcond[5]=((x170)+(((new_r00)*(sj2))));
evalcond[6]=((x172)+(((new_r01)*(sj2))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x170)))+(((IkReal(-1.00000000000000))*(new_r00)*(x169))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r01)*(x169)))+(((IkReal(-1.00000000000000))*(x172))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02)*(x169)))+(((IkReal(-1.00000000000000))*(x171))));
evalcond[10]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r21, new_r20);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x174=IKcos(j0);
IkReal x175=((IkReal(1.00000000000000))*(sj2));
IkReal x176=((IkReal(1.00000000000000))*(IKsin(j0)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x174)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x176))));
evalcond[2]=((x174)+(((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x175))));
evalcond[3]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x175)))+(((IkReal(-1.00000000000000))*(x176))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x177=((IkReal(1.00000000000000))*(new_r12));
IkReal x178=((new_r02)*(sj2));
IkReal x179=((((IkReal(-1.00000000000000))*(sj2)*(x177)))+(((cj2)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x179;
evalcond[5]=x179;
evalcond[6]=((x178)+(((cj2)*(new_r12))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj2)*(x177)))+(((IkReal(-1.00000000000000))*(x178))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x180=((IkReal(1.00000000000000))*(cj2));
if( IKabs(((((IkReal(-1.00000000000000))*(new_r11)*(x180)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r11)*(sj2)))+(((IkReal(-1.00000000000000))*(new_r01)*(x180))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r11)*(x180)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2)))))+IKsqr(((((new_r11)*(sj2)))+(((IkReal(-1.00000000000000))*(new_r01)*(x180)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r11)*(x180)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2)))), ((((new_r11)*(sj2)))+(((IkReal(-1.00000000000000))*(new_r01)*(x180)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x181=IKcos(j0);
IkReal x182=IKsin(j0);
IkReal x183=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r11)*(x183)))+(x181)+(((cj2)*(new_r01))));
evalcond[1]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x183)))+(((IkReal(-1.00000000000000))*(x182))));
evalcond[2]=((((cj2)*(new_r10)))+(x181)+(((new_r00)*(sj2))));
evalcond[3]=((x182)+(((cj2)*(new_r11)))+(((new_r01)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x184=((IkReal(-1.00000000000000))+(new_r22));
IkReal x185=((((cj2)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj2))));
IkReal x186=((((new_r02)*(sj2)))+(((cj2)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x184;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x185;
evalcond[5]=x185;
evalcond[6]=x186;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x184;
evalcond[10]=x186;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((cj2)*(new_r11)))+(((new_r01)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r01)))+(((new_r11)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(new_r11)))+(((new_r01)*(sj2)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r01)))+(((new_r11)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((cj2)*(new_r11)))+(((new_r01)*(sj2)))), ((((IkReal(-1.00000000000000))*(cj2)*(new_r01)))+(((new_r11)*(sj2)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x187=IKcos(j0);
IkReal x188=((IkReal(1.00000000000000))*(sj2));
IkReal x189=((IkReal(1.00000000000000))*(IKsin(j0)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r11)*(x188)))+(x187)+(((cj2)*(new_r01))));
evalcond[1]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(x189)))+(((IkReal(-1.00000000000000))*(new_r10)*(x188))));
evalcond[2]=((((cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(x187)))+(((new_r00)*(sj2))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x189)))+(((cj2)*(new_r11)))+(((new_r01)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2)))))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x190=IKcos(j0);
IkReal x191=IKsin(j0);
IkReal x192=((IkReal(1.00000000000000))*(cj1));
IkReal x193=((new_r01)*(sj2));
IkReal x194=((IkReal(1.00000000000000))*(sj1));
IkReal x195=((cj2)*(new_r10));
IkReal x196=((new_r00)*(sj2));
IkReal x197=((cj2)*(new_r11));
IkReal x198=((IkReal(1.00000000000000))*(sj2));
IkReal x199=((IkReal(1.00000000000000))*(x191));
evalcond[0]=((new_r20)+(((cj1)*(x190))));
evalcond[1]=((new_r21)+(((cj1)*(x191))));
evalcond[2]=((x190)+(((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x198))));
evalcond[3]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x198)))+(((IkReal(-1.00000000000000))*(x199))));
evalcond[4]=((x196)+(x195)+(((sj1)*(x190))));
evalcond[5]=((x193)+(x197)+(((sj1)*(x191))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x194)*(x195)))+(((IkReal(-1.00000000000000))*(x190)))+(((IkReal(-1.00000000000000))*(new_r20)*(x192)))+(((IkReal(-1.00000000000000))*(x194)*(x196))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x194)*(x197)))+(((IkReal(-1.00000000000000))*(x193)*(x194)))+(((IkReal(-1.00000000000000))*(new_r21)*(x192)))+(((IkReal(-1.00000000000000))*(x199))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r01)))+(((new_r11)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r01)))+(((new_r11)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(cj2)*(new_r01)))+(((new_r11)*(sj2)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x200=IKcos(j0);
IkReal x201=IKsin(j0);
IkReal x202=((IkReal(1.00000000000000))*(cj1));
IkReal x203=((new_r01)*(sj2));
IkReal x204=((IkReal(1.00000000000000))*(sj1));
IkReal x205=((cj2)*(new_r10));
IkReal x206=((new_r00)*(sj2));
IkReal x207=((cj2)*(new_r11));
IkReal x208=((IkReal(1.00000000000000))*(sj2));
IkReal x209=((IkReal(1.00000000000000))*(x201));
evalcond[0]=((new_r20)+(((cj1)*(x200))));
evalcond[1]=((new_r21)+(((cj1)*(x201))));
evalcond[2]=((((cj2)*(new_r01)))+(x200)+(((IkReal(-1.00000000000000))*(new_r11)*(x208))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x209)))+(((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x208))));
evalcond[4]=((((sj1)*(x200)))+(x206)+(x205));
evalcond[5]=((x207)+(x203)+(((sj1)*(x201))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x202)))+(((IkReal(-1.00000000000000))*(x204)*(x206)))+(((IkReal(-1.00000000000000))*(x200)))+(((IkReal(-1.00000000000000))*(x204)*(x205))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x209)))+(((IkReal(-1.00000000000000))*(x204)*(x207)))+(((IkReal(-1.00000000000000))*(new_r21)*(x202)))+(((IkReal(-1.00000000000000))*(x203)*(x204))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x210=((IkReal(-1.00000000000000))*(gconst5));
if( IKabs(((new_r21)*(x210))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(x210))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r21)*(x210)), ((new_r20)*(x210)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x211=IKcos(j0);
IkReal x212=IKsin(j0);
IkReal x213=((IkReal(1.00000000000000))*(cj1));
IkReal x214=((new_r01)*(sj2));
IkReal x215=((IkReal(1.00000000000000))*(sj1));
IkReal x216=((cj2)*(new_r10));
IkReal x217=((new_r00)*(sj2));
IkReal x218=((cj2)*(new_r11));
IkReal x219=((IkReal(1.00000000000000))*(sj2));
IkReal x220=((IkReal(1.00000000000000))*(x212));
evalcond[0]=((new_r20)+(((cj1)*(x211))));
evalcond[1]=((new_r21)+(((cj1)*(x212))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r11)*(x219)))+(x211)+(((cj2)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x220)))+(((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x219))));
evalcond[4]=((((sj1)*(x211)))+(x216)+(x217));
evalcond[5]=((x214)+(x218)+(((sj1)*(x212))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x215)*(x217)))+(((IkReal(-1.00000000000000))*(x215)*(x216)))+(((IkReal(-1.00000000000000))*(new_r20)*(x213)))+(((IkReal(-1.00000000000000))*(x211))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x220)))+(((IkReal(-1.00000000000000))*(x215)*(x218)))+(((IkReal(-1.00000000000000))*(x214)*(x215)))+(((IkReal(-1.00000000000000))*(new_r21)*(x213))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x221=((IkReal(-1.00000000000000))*(gconst2));
if( IKabs(((new_r21)*(x221))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(x221))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r21)*(x221)), ((new_r20)*(x221)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((cj1)*(IKcos(j0)))));
evalcond[1]=((new_r21)+(((cj1)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x222=((cj0)*(gconst6));
if( IKabs(((new_r02)*(x222))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x222))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r02)*(x222)), ((new_r12)*(x222)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x223=IKcos(j2);
IkReal x224=IKsin(j2);
IkReal x225=((IkReal(1.00000000000000))*(sj0));
IkReal x226=((IkReal(1.00000000000000))*(sj1));
IkReal x227=((IkReal(1.00000000000000))*(cj1));
IkReal x228=((new_r12)*(x223));
IkReal x229=((new_r01)*(x224));
IkReal x230=((new_r10)*(x223));
IkReal x231=((IkReal(1.00000000000000))*(x224));
IkReal x232=((new_r00)*(x224));
IkReal x233=((new_r11)*(x223));
IkReal x234=((new_r02)*(x224));
evalcond[0]=((((new_r02)*(x223)))+(((IkReal(-1.00000000000000))*(new_r12)*(x231))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x231)))+(cj0)+(((new_r01)*(x223))));
evalcond[2]=((x234)+(((IkReal(-1.00000000000000))*(x227)))+(x228));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r10)*(x231)))+(((new_r00)*(x223)))+(((IkReal(-1.00000000000000))*(x225))));
evalcond[4]=((x232)+(x230)+(((cj0)*(sj1))));
evalcond[5]=((((sj0)*(sj1)))+(x233)+(x229));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x226)))+(((cj1)*(x232)))+(((cj1)*(x230))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x226)))+(((cj1)*(x229)))+(((cj1)*(x233))));
evalcond[8]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x226)))+(((cj1)*(x228)))+(((cj1)*(x234))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x226)*(x234)))+(((IkReal(-1.00000000000000))*(x226)*(x228)))+(((IkReal(-1.00000000000000))*(new_r22)*(x227))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x226)*(x232)))+(((IkReal(-1.00000000000000))*(x226)*(x230)))+(((IkReal(-1.00000000000000))*(cj0)))+(((IkReal(-1.00000000000000))*(new_r20)*(x227))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r21)*(x227)))+(((IkReal(-1.00000000000000))*(x226)*(x233)))+(((IkReal(-1.00000000000000))*(x225)))+(((IkReal(-1.00000000000000))*(x226)*(x229))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x235=((cj1)*(gconst7));
if( IKabs(((new_r02)*(x235))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x235))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r02)*(x235)), ((new_r12)*(x235)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x236=IKcos(j2);
IkReal x237=IKsin(j2);
IkReal x238=((IkReal(1.00000000000000))*(sj0));
IkReal x239=((IkReal(1.00000000000000))*(sj1));
IkReal x240=((IkReal(1.00000000000000))*(cj1));
IkReal x241=((new_r12)*(x236));
IkReal x242=((new_r01)*(x237));
IkReal x243=((new_r10)*(x236));
IkReal x244=((IkReal(1.00000000000000))*(x237));
IkReal x245=((new_r00)*(x237));
IkReal x246=((new_r11)*(x236));
IkReal x247=((new_r02)*(x237));
evalcond[0]=((((new_r02)*(x236)))+(((IkReal(-1.00000000000000))*(new_r12)*(x244))));
evalcond[1]=((((new_r01)*(x236)))+(((IkReal(-1.00000000000000))*(new_r11)*(x244)))+(cj0));
evalcond[2]=((((IkReal(-1.00000000000000))*(x240)))+(x241)+(x247));
evalcond[3]=((((IkReal(-1.00000000000000))*(x238)))+(((new_r00)*(x236)))+(((IkReal(-1.00000000000000))*(new_r10)*(x244))));
evalcond[4]=((((cj0)*(sj1)))+(x243)+(x245));
evalcond[5]=((((sj0)*(sj1)))+(x242)+(x246));
evalcond[6]=((((cj1)*(x243)))+(((cj1)*(x245)))+(((IkReal(-1.00000000000000))*(new_r20)*(x239))));
evalcond[7]=((((cj1)*(x246)))+(((cj1)*(x242)))+(((IkReal(-1.00000000000000))*(new_r21)*(x239))));
evalcond[8]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x239)))+(((cj1)*(x247)))+(((cj1)*(x241))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r22)*(x240)))+(((IkReal(-1.00000000000000))*(x239)*(x247)))+(((IkReal(-1.00000000000000))*(x239)*(x241))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x239)*(x243)))+(((IkReal(-1.00000000000000))*(x239)*(x245)))+(((IkReal(-1.00000000000000))*(new_r20)*(x240)))+(((IkReal(-1.00000000000000))*(cj0))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x238)))+(((IkReal(-1.00000000000000))*(x239)*(x242)))+(((IkReal(-1.00000000000000))*(new_r21)*(x240)))+(((IkReal(-1.00000000000000))*(x239)*(x246))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "0bc2d4922ab7edde25458ec7e9598163"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
